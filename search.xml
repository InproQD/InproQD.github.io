<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>moment-timezone.js</title>
      <link href="/2022/11/20/moment-timezone/"/>
      <url>/2022/11/20/moment-timezone/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>moment.timezone</code>是<code>moment</code>额外封装的一个插件，专门用于修改时区，具有部分moment的方法。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-javascript"><code class="language-javascript">npm install moment<span class="token operator">-</span>timezone<span class="token comment" spellcheck="true">//或</span>yarn add moment<span class="token operator">-</span>timezone</code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment-timezone'</span></code></pre><blockquote><p>上一篇文章中已经讲解了<code>moment</code>的用法，这里的引入的<code>moment</code>是<code>moment-timezone</code>的实例，如果同一文件下同时引入<code>moment</code>和<code>moment-timezone</code>，则需要区别实例名字。<br>例如：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 这里使用momentTz是为了区别于moment的实例，你也可以取其他名字作为moment-timezone的实例</span><span class="token keyword">import</span> momentTz <span class="token keyword">from</span> <span class="token string">'moment-timezone'</span><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment-timezone'</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里拿到的就是美国洛杉矶的当地时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回2022-10-31 09:00:00，洛杉矶与北京的时差为16小时</span></code></pre><ul><li>提示：以下两种书写方式返回的不一样</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> time1 <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"2013-11-18 11:55"</span><span class="token punctuation">,</span> <span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> time2 <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">"2013-11-18 11:55"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>time1 返回的是这个时间附带上洛杉矶时区名字（并没有切换时间到洛杉矶时区）<br>time2 返回的是切换到洛杉矶时区后的时间</p></blockquote><h2 id="默认时区"><a href="#默认时区" class="headerlink" title="默认时区"></a>默认时区</h2><ul><li>更换默认时区，之后获得的时间都是重置之后时区的时间<pre class=" language-javascript"><code class="language-javascript">moment<span class="token punctuation">.</span>tz<span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token string">"America/New_York"</span><span class="token punctuation">)</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回的是纽约的当地时间</span></code></pre></li><li>想要恢复当地的默认时区，则不带参数调用<pre class=" language-javascript"><code class="language-javascript">moment<span class="token punctuation">.</span>tz<span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="可选时区"><a href="#可选时区" class="headerlink" title="可选时区"></a>可选时区</h2><blockquote><p><a href="http://momentjs.cn/timezone/">官网</a>提供了能转换的所有时区，以地图的形式展示。<br><img src="https://img-blog.csdnimg.cn/6820453935cd424d96447833b189b58c.png" alt="在这里插入图片描述"></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moment.js</title>
      <link href="/2022/11/20/momentjs/"/>
      <url>/2022/11/20/momentjs/</url>
      
        <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> moment</code></pre><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 或者</span><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span></code></pre><h2 id="常用的moment方法"><a href="#常用的moment方法" class="headerlink" title="常用的moment方法"></a>常用的moment方法</h2><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不传入值，返回的则是当前时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回的是一个对象，对象包含了当前的时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这样返回的才是时间，例如：2022-11-14T18:36:32+08:00</span></code></pre><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><ul><li><p>字符规则<br><img src="https://img-blog.csdnimg.cn/6b8415c139e7446382316739650b0265.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/81c15ac1b85743c48ce3f45098b3e941.png" alt="在这里插入图片描述"></p></li><li><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回2022-11-15，因为moment()没传参，返回的是当前时间</span></code></pre></li><li><p>格式化指定的时间（年月日）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-25</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DDDD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-359</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YY-MM-DD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为98-12-25</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD-Q'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-25-4</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-Do'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-25th</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MMM-Do'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-Dec-25th</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MMMM-Do'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-December-25th</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为914515200</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为914515200000,毫秒时间戳</span></code></pre></li><li><p>格式化指定的时间（时分秒）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为14:19:41</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'hh:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  输出为02:19:41</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm:ss a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为14:19:41 pm</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm:ss A'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  输出为14:19:41 PM</span></code></pre><h3 id="转换时间戳"><a href="#转换时间戳" class="headerlink" title="转换时间戳"></a>转换时间戳</h3><blockquote><p>有两种方式转换时间戳，<code>moment().valueOf()</code>转换为毫秒数和<code>moment.unix()</code>转换为秒数</p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回当前时间的毫秒时间戳</span><span class="token comment" spellcheck="true">// moment接收的是毫秒数，unix返回为秒数</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回值1318781</span><span class="token comment" spellcheck="true">//moment也能接收其他格式的时间，将之转换为时间戳</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022/3/28'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回1648396800</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022/3/28'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回1648396800000</span></code></pre><h3 id="get-获取时间"><a href="#get-获取时间" class="headerlink" title="get()获取时间"></a>get()获取时间</h3><ul><li>获取年份<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回2022</span></code></pre></li><li>获取月份<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回0-11，假设当前12月，返回值就是11</span></code></pre></li><li>获取日期<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回当前月份的天数，11.17则返回17</span></code></pre></li><li>获取时分秒<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'hour'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'minute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>获取当月的天数<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">daysInMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回当前月份的天数</span></code></pre><h3 id="操作moment"><a href="#操作moment" class="headerlink" title="操作moment"></a>操作moment</h3><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4></li><li>示例：<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在当前时间的基础上往后顺延7天，假设今天2022/11/17,返回的结果应是2022/11/24</span><span class="token comment" spellcheck="true">// 另一种写法</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 链式写法</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'months'</span><span class="token punctuation">)</span></code></pre></li><li>可选键位表<br><img src="https://img-blog.csdnimg.cn/2ad98619ce564b1aac0186b3451ce384.png" alt="在这里插入图片描述"><h4 id="subtract"><a href="#subtract" class="headerlink" title="subtract()"></a>subtract()</h4></li><li>与<code>add()</code>使用方法相同，键位也是一样</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或者</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span></code></pre><h4 id="startOf"><a href="#startOf" class="headerlink" title="startOf"></a>startOf</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//一年的最开始，例如：2022/1/1 00:00:00</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 某个月的最开始 2022/11/01 00:00:00</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'quarter'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前季度的开始，2022-10-01 00:00:00(当前11月)</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'week'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 本周的第一天</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当天的0点</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//跟day一样，当天的0点</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前小时的最开始</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前分钟的最开始</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前秒的最开始</span></code></pre><h4 id="endOf"><a href="#endOf" class="headerlink" title="endOf"></a>endOf</h4><ul><li>跟 <code>startOf</code>同样的用法<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2022-12-31 23: 59: 59</span></code></pre><h3 id="比较moment-查询moment"><a href="#比较moment-查询moment" class="headerlink" title="比较moment(查询moment)"></a>比较moment(查询moment)</h3><h4 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore"></a>isBefore</h4></li><li>查询某个时间是否在另一时间之前</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个moment是否在before里的时间之前</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span></code></pre><ul><li><code>isBefore</code>接收第二个参数，作为比较的精度<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 两个时间只比较年份的先后</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回false</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token comment" spellcheck="true">// 也可比较月份，日期，小时, 分钟，秒</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-10-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 17:53:24'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 18:53:24'</span><span class="token punctuation">,</span> <span class="token string">'hour'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 17:54:24'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 18:53:24'</span><span class="token punctuation">,</span> <span class="token string">'minute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回false</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 17:53:23'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 18:53:24'</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span></code></pre></li></ul><h4 id="isSame"><a href="#isSame" class="headerlink" title="isSame"></a>isSame</h4><ul><li>查询两个时间是否一致，用法跟<code>isBefore</code>一样，接收第二个参数作为比较精度</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 比较精度</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span></code></pre><ul><li>跟<code>isBefore</code>不一样的是，当接收第二个参数时，会比较精度之前的时间，例如：传入day为第二参数，会比较day之前的month和year，只有完全一样才会返回为true</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-07-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre><h4 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter"></a>isAfter</h4><ul><li>用于比较moment在某个时间之后，跟<code>isSame</code>一样，使用day为第二参数，将会检查年份、月份、日期。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-19'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-07-18'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre><h4 id="isSameOrBefore和isSameOrAfter"><a href="#isSameOrBefore和isSameOrAfter" class="headerlink" title="isSameOrBefore和isSameOrAfter"></a>isSameOrBefore和isSameOrAfter</h4><ul><li><code>isSameOrBefore</code>判断是否一样或在某个时间之前，等同于<code>&gt;=</code>和<code>&lt;=</code>，第二参数会精准比较</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-10-20'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSameOrBefore</span><span class="token punctuation">(</span><span class="token string">'2021-12-31'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><ul><li><code>isSameOrBefore</code>判断是否一样或在某个时间之后，第二参数会精准比较</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-10-20'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSameOrAfter</span><span class="token punctuation">(</span><span class="token string">'2023-12-31'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h4 id="isBetween"><a href="#isBetween" class="headerlink" title="isBetween"></a>isBetween</h4><ul><li><code>isBetween</code>接收两个时间参数作为范围，比较moment是否在这个范围之内</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBetween</span><span class="token punctuation">(</span><span class="token string">'2022-11-10'</span><span class="token punctuation">,</span> <span class="token string">'2022-11-25'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>currency.js</title>
      <link href="/2022/11/19/currency/"/>
      <url>/2022/11/19/currency/</url>
      
        <content type="html"><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><blockquote><p><code>currency</code>可用于货币与数字之间的转换，还可用于数值的加减乘除（主要解决的是浮点数的问题）</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token comment" spellcheck="true">// 返回结果0.30000000000000004</span><span class="token comment" spellcheck="true">// 用curreny进行运算</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回0.3</span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save currency.js// 或者yarn add currency.js</code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> currency <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'currency.js'</span><span class="token punctuation">)</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="转换货币格式"><a href="#转换货币格式" class="headerlink" title="转换货币格式"></a>转换货币格式</h3><ul><li>默认转为美元格式<code>$</code><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//$1,000.00</span></code></pre></li><li>自定义货币格式<blockquote><p>用<code>&#123;&#125;</code>囊括配置项<br><code>precision</code>指代精确到小数点哪一位，可选0，1，2…<br><code>symbol</code>则是数字前的符号，一般配置货币符号<br><code>decimal</code>选项是配置小数点那一位的符号（替换小数点）<br><code>separator</code>指代分隔符，按照三位数一个分隔符来格式化</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">1000.12</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>precision<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">'¥'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ¥1,000</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">1000.12</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>symbol<span class="token punctuation">:</span> <span class="token string">'€'</span><span class="token punctuation">,</span> decimal<span class="token punctuation">:</span> <span class="token string">','</span><span class="token punctuation">,</span> separator<span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// €1.000,12</span></code></pre><h3 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h3></li><li>value<blockquote><p>返回的是原本的值，返回类型是==number==, 输入字符串类型的数字也会转==number==</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token comment" spellcheck="true">// 返回121.3</span></code></pre></li><li>intValue<blockquote><p>把小数点后两位的数字转为整数（相当于乘以一百），并且会把小数点第三位的数字四舍五入到第二位。先四舍五入，再乘100</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回1213</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回12134</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.344</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回12134</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.349</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回12135</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回8000</span></code></pre></li><li>dollar<blockquote><p>去掉小数后面的值，返回整数，不进行四舍五入</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dollars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 121</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">0.45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dollars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 0</span></code></pre></li><li>cents<blockquote><p>去掉小数点之前的值，返回小数点之后的整数</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 34</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">0.45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 45</span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><blockquote><p><code>curreny</code>提供的数字运算支持负数运算</p></blockquote></li><li>add （加）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回  "123.35"</span><span class="token comment" spellcheck="true">// 负数运算</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回  "80"</span></code></pre></li><li>subtract（减）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 120</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -320</span></code></pre></li><li>multiply （乘）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 246.9</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span></code></pre></li><li>divide （除）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 120</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -120</span></code></pre></li><li>distribute （均分）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [8, 8, 8]</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [7.67, 7.67, 7.66]</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex data persistence</title>
      <link href="/2022/09/27/vuex-persistedstate/"/>
      <url>/2022/09/27/vuex-persistedstate/</url>
      
        <content type="html"><![CDATA[<h2 id="持久化的目的"><a href="#持久化的目的" class="headerlink" title="持久化的目的"></a>持久化的目的</h2><blockquote><p>Vuex提供给我们更方便和安全的数据管理，但是一旦刷新页面，所存储的数据也会消失。但是大多数的项目背景要求我们对数据进行复用，比如：头像和用户信息需要存储，登录状态和token，购物车数据等等，所以我们需要对特定的Vuex版块进行持久化处理。</p></blockquote><h2 id="安装vuex-persistedstate插件实现持久化"><a href="#安装vuex-persistedstate插件实现持久化" class="headerlink" title="安装vuex-persistedstate插件实现持久化"></a>安装vuex-persistedstate插件实现持久化</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save vuex<span class="token operator">-</span>persistedstate</code></pre><h3 id="引用插件"><a href="#引用插件" class="headerlink" title="引用插件"></a>引用插件</h3><ul><li>在store文件夹下的index文件里引入<br><img src="https://img-blog.csdnimg.cn/108d944e20584f848beee02b6177b9ba.png" alt="请添加图片描述"></li><li>具体操作步骤<br>```javascript<br>import Vue from ‘vue’<br>import Vuex from ‘vuex’<br>// 第一步，引入持久化插件<br>import createPersistedState from ‘vuex-persistedstate’<br>// 以下引入的是状态模块，仅是示例，根据实际项目情况而定<br>import shop from ‘@/modules/shop’<br>import payment from ‘@/modules/payment’<br>import news from ‘@/modules/news ‘</li></ul><p>Vue.use(Vuex)<br>const store = new Vuex.Store({<br>  modules: {<br>    shop,<br>    payment,<br>    news<br>  },<br>  //第二步，进行持久化的配置<br>  plugins: [createPersistedState({<br>    // 这里可以配置存储在localStorage还是sessionStorage, 默认是localStorage,例如<br>    storage: window.sessionStorage,<br>    // paths是持久化存储state中的哪些数据，如果是模块下具体的数据需要加上模块名称，如payment.amount<br>    paths: [‘shop’, ‘payment’]<br>  })]<br>})<br>export default store</p><pre><code>### 实现部分数据持久化不同方法- 方法一，使用path指定持久化的模块```javascriptimport Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;import createPersistedState from &#39;vuex-persistedstate&#39;Vue.use(Vuex)const store = new Vuex.Store(&#123;  modules: &#123;  &#125;,  plugins: [createPersistedState(&#123;    // shop和payment是模块名，会被持久化    paths: [&#39;shop&#39;, &#39;payment&#39;]  &#125;)]&#125;)export default store</code></pre><ul><li>方法二，使用<code>vuex-persistedstate</code>的reducer函数<br>```javascript<br>import Vue from ‘vue’<br>import Vuex from ‘vuex’<br>import createPersistedState from ‘vuex-persistedstate’</li></ul><p>Vue.use(Vuex)<br>const store = new Vuex.Store({<br>  modules: {<br>  },<br>  plugins: [createPersistedState({<br>    // shop和payment是模块名，会被持久化<br>   reducer (val) {<br>   // 这里的val指代的是store里的所有state<br>     return {<br>       // 只储存state中payment模块下的amount数据，前面的amount是keyname<br>       amount: val.payment.amount<br>     }<br>   }<br>  })]<br>})<br>export default store</p><pre><code>### 存储数据到cookie的步骤```javascriptimport createPersistedState from &#39;vuex-persistedstate&#39;import * as Cookies from &#39;js-cookie&#39;const store = new Store(&#123;  plugins: [    createPersistedState(&#123;      storage: &#123;        getItem: (key) =&gt; Cookies.get(key),        setItem: (key, value) =&gt; Cookies.set(key, value, &#123; expires: 3, secure: true &#125;),        removeItem: (key) =&gt; Cookies.remove(key),      &#125;    &#125;)  ]&#125;)</code></pre><h3 id="加密持久化的数据"><a href="#加密持久化的数据" class="headerlink" title="加密持久化的数据"></a>加密持久化的数据</h3><blockquote><p>因为持久化的数据是放在localStorage或者sessionStorage，所以为了数据安全，我们需要对持久化的版块进行加密。</p></blockquote><ul><li>安装加密的插件<pre class=" language-javascript"><code class="language-javascript">npm install secure<span class="token operator">-</span>ls</code></pre></li><li>在store/index.js引入<br>```javascript<br>import Vue from ‘vue’<br>import Vuex from ‘vuex’<br>import createPersistedState from ‘vuex-persistedstate’<br>// 引入插件<br>import SecureLS from ‘secure-ls’<br>// encryptionSecret:自定义密钥，可选，这个操作能让数据更安全存储，密钥内容仅作参考，不要粘贴<br>const ls = new SecureLS({ isCompression: false, encryptionSecret: ‘7352grt84-d90d-34dc-52e0-fad9efgwec675d1d’ })<br>Vue.use(Vuex)</li></ul><p>const store = new Vuex.Store({<br>  modules: {<br>    shop,<br>    payment<br>  },<br>  plugins: [createPersistedState({<br>    storage: {<br>      getItem: (key) =&gt; ls.get(key),<br>      setItem: (key, value) =&gt; ls.set(key, value),<br>      removeItem: (key) =&gt; ls.remove(key)<br>    },<br>    // 需要持久化的模块<br>    paths: [‘’, ‘’]<br>  })]<br>})</p><p>export default store</p><p>```</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>Vuex数据持久化的方法很多，<code>vuex-persistedstate</code>并不是唯一，可以自己书写JS实现，也可以用其他插件，例如vuex-persist。如果是公司项目进行数据持久化，最好对存储在localStorage的数据进行加密，防止数据泄露。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex study note</title>
      <link href="/2022/09/22/vuex-study-note/"/>
      <url>/2022/09/22/vuex-study-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex应用场景"><a href="#Vuex应用场景" class="headerlink" title="Vuex应用场景"></a>Vuex应用场景</h2><blockquote><p>Vuex是基于Vue项目环境的状态管理。在Vue项目中，父子组件和兄弟组件传值给我们带来很多便捷，但是当多个组件嵌套，普通传值方法显得极为繁琐，并且很难维护。Vuex提供一个状态管理的平台和库，把全局需要共享的状态和数据放在VueX，任一组件都有权限调用并修改VueX的共享数据。</p></blockquote><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="安装VueX"><a href="#安装VueX" class="headerlink" title="安装VueX"></a>安装VueX</h3><pre class=" language-javascript"><code class="language-javascript">npm install vuex <span class="token operator">--</span>save</code></pre><p>或者</p><pre class=" language-javascript"><code class="language-javascript">yarn add vuex <span class="token operator">--</span>save</code></pre><h3 id="引用VueX"><a href="#引用VueX" class="headerlink" title="引用VueX"></a>引用VueX</h3><p>在项目目录下新建一个store文件夹，创建index.js并引入Vuex和相应模块。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// 以下引入的是状态模块，仅是示例，根据实际项目情况而定</span><span class="token keyword">import</span> shop <span class="token keyword">from</span> <span class="token string">'@/modules/shop'</span><span class="token keyword">import</span> payment <span class="token keyword">from</span> <span class="token string">'@/modules/payment'</span><span class="token keyword">import</span> news <span class="token keyword">from</span> <span class="token string">'@/modules/news '</span><span class="token keyword">import</span> workflow <span class="token keyword">from</span> <span class="token string">'@/modules/workflow'</span><span class="token keyword">import</span> notification <span class="token keyword">from</span> <span class="token string">'@/modules/notification'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p>具体项目结构如图所示，仅作与参考<br><img src="https://img-blog.csdnimg.cn/42fc524279124b969ff5e572bb641148.png" alt="在这里插入图片描述"><br>在main.js中引入</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store/index'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="VueX五大核心概念"><a href="#VueX五大核心概念" class="headerlink" title="VueX五大核心概念"></a>VueX五大核心概念</h2><blockquote><p>State, Getter, Mutation, Action, Module</p></blockquote><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>State是VueX中用于存放数据的板块，类似于Vue单文件里面的data，允许全局访问。<br>在对应的JS文件中注册state</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Vue文件中访问State的数据<br>方法一：直接调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>方法二：借助计算属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  computed<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>方法三：利用辅助函数<code>mapState</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> mapState <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  computed<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>有时候我们调用state数据，需要用到state的派生数据（例如过滤表格中的数据）</p><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  doneTodosCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这样操作显得复杂，Getter就是State的计算属性，可以对State进行操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  getDoubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>调用Getter写法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getDoubleCount <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>javascript中调用记得加<code>this</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    getDoubbleCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getDoubleCount    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>Getter的第一个参数为State，Getter 也可以接受其他 getter 作为第二个参数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  getCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  getDoubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> getters<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>VueX是集中管理数据的平台，Mutation是对应的修改数据的方法</p><blockquote><p>Mutation更像是一个事件，有事件类型(type)和回调函数(handler)</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  getCount<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  setCount <span class="token punctuation">(</span>state<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里setCount就是事件type，对应的回调函数如下</span>    state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span>n  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>调用Mutation</p><blockquote><p><code>store.commit</code>的第一个参数对应哪个Mutation，第二个参数作为值传入该Mutation</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    getDoubbleCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//这里的10会作为第二个参数传入setCount</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>注意，<code>mutation的回调函数(handler)不能为异步函数</code>。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>Action 类似于 Mutation，不同在于：Action 提交的是 Mutation，而不是直接变更状态；并且Action可以包含任意异步操作</p></blockquote><ul><li>注册Action:<br>```javascript<br>const state = {<br>count: 1<br>}</li></ul><p>const getters = {<br>  getCount: state =&gt; state.count<br>}</p><p>const mutations = {<br>  setCount: (state) =&gt; state.count<br>}</p><p>const action = {<br>  increment (context) {<br>    context.commit(‘setCount’)<br>  }<br>}</p><pre><code>注：这里的context是store实例对象，所以可以调用commit，也可以调用state和getters.- 因为context是一个对象，也可以通过ES结构来书写```javascriptconst action = &#123;  increment (&#123; context &#125;) &#123;    commit(&#39;setCount&#39;)  &#125;&#125;</code></pre><ul><li>调用Action，通过<code>store.dispatch</code>触发<pre class=" language-javascript"><code class="language-javascript">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span></code></pre></li><li>Action跟Mutation的最大区别就是Action可以定义异步函数，而Mutation不行<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>increment <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> context <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><code>store.dispatch</code>支持多个参数</li></ul><p>先在JS文件中声明</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  setCount <span class="token punctuation">(</span>state<span class="token punctuation">,</span> playLoad<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> playLoad<span class="token punctuation">.</span>count  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  increment <span class="token punctuation">(</span>context， count<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">,</span> conut<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>  调用<code>dispatch</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 以载荷形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 以对象形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span> <span class="token string">'setCount'</span><span class="token punctuation">,</span>  count<span class="token punctuation">:</span> <span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><blockquote><p>当项目足够大时，Vuex的数据会变得冗余，庞大，为了方便管理，Module把VueX的数据分为不同的模块，每个模块都有独立的state，getter，mutation，action。</p></blockquote><p>如图所示，modules文件夹下每一个JS文件都是单独的一个module模块<br><img src="https://img-blog.csdnimg.cn/42fc524279124b969ff5e572bb641148.png" alt="在这里插入图片描述"><br>在单独的shop module模块下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> shop <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里的 `state` 对象是模块的局部状态</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    doubleCount <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>index文件夹声明store实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  state：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>，  modules<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//上一段代码中的shop module文件</span>  shop  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>如果在Vue文件中用<code>store.state</code>访问count属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment" spellcheck="true">//这里返回的count 等于100，访问的是store实例中的state</span></code></pre><p>如果要访问shop module的count 属性，则需要增加module名：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>shop<span class="token punctuation">.</span>count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment" spellcheck="true">//这里返回的count 等于0，访问的是shop模块中的state</span></code></pre><blockquote><p>如果是访问module中的mutation方法，则会出现不同的情况。最好是不同的模块之间不要用相同的命名</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    getDoubbleCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//如果其他模块中都有setCount方法，则所有的都会被调用</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>当然，遇到这种情况也可以添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> shop <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//调用时需要模块名为路径</span>  namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//正确的调用方式：$store.commit('shop/increment')</span>  mutations<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里的 `state` 对象是模块的局部状态</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//正确的调用方式：$store.getters['shop/doubleCount ']</span>  getters<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    doubleCount <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是关于Vuex的讲解，列举module的分类方法并不是唯一，也可以单独的把state, getter, action, mutation放入独立的js文件。Vuex帮助我们高效的解决了全局的数据传递，但是需要更加规范的分类，才能应对越来越冗余的数据。下一篇博客将会讲解如何进行Vuex数据持久化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sass study note</title>
      <link href="/2022/09/20/sass-study-note/"/>
      <url>/2022/09/20/sass-study-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Sass和Scss区别"><a href="#Sass和Scss区别" class="headerlink" title="Sass和Scss区别"></a>Sass和Scss区别</h2><ol><li><strong>Sass</strong>是CSS3扩展，增加了规则嵌套、变量、混合、选择器继承等等语法，而<strong>Scss</strong>是<strong>Sass</strong>的升级版本，具备Sass特性的同时，更能兼具CSS3的语法特点；</li><li><strong>Sass</strong>使用的是缩进语法，去掉括号的同时，对空格要求更为严格，<strong>Scss</strong>跟CSS3用法相似；</li><li>使用时要注意，同项目可以同时使用<strong>Sass</strong>和<strong>Scss</strong>,单文件开发不能同时引用，引用时只需要标签内加 ==lang=”sass”==<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"sass"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li></ol><h2 id="Sass语法"><a href="#Sass语法" class="headerlink" title="Sass语法"></a>Sass语法</h2><ol><li>去掉{}，使用换行来区分选择器名称和属性, 换行替换<code>;</code>来作为属性之间的间隔。<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>main<span class="token operator">-</span>contentheight<span class="token punctuation">:</span> 100px</code></pre></li><li>缩进必须为两个空格或2的倍数，空格不规范会导致样式不生效。</li><li><strong>Sass</strong>的嵌套语法</li></ol><ul><li>CSS3语法：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>main <span class="token punctuation">.</span>top <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>margin<span class="token operator">-</span>top<span class="token punctuation">:</span>10px<span class="token punctuation">;</span>height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li>Sass语法可改为：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>main<span class="token punctuation">.</span>top  margin<span class="token operator">-</span>top<span class="token punctuation">:</span>10px  height<span class="token punctuation">:</span> 100px</code></pre></li></ul><ol start="4"><li>父子class的class名称拼接</li></ol><ul><li>父选择器名称==main-content==，子选择器的名称==main-content-top==，<strong>Sass</strong>写法：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>mian<span class="token operator">-</span>contentheight<span class="token punctuation">:</span> 500px<span class="token operator">&amp;</span><span class="token operator">-</span>top height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span></code></pre></li></ul><ol start="5"><li><strong>Sass</strong>的变量使用</li></ol><ul><li>变量声明一律用<code>$</code><pre class=" language-css"><code class="language-css">$width = <span class="token number">20</span>px<span class="token number">.</span>main-content<span class="token property">width</span><span class="token punctuation">:</span>$width</code></pre></li><li>默认变量只须<code>!default</code><pre class=" language-css"><code class="language-css">$width = <span class="token number">20</span>px !default<span class="token number">.</span>main-content <span class="token property">width</span><span class="token punctuation">:</span>$width</code></pre></li><li><strong>Sass</strong>中的变量也存在块级作用域<pre class=" language-css"><code class="language-css">//当前的变量只能在main-content中生效<span class="token number">.</span>main-content$<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token property">width</span><span class="token punctuation">:</span> $width// 通过!global可在其他选择器中使用变量<span class="token number">.</span>main-content$<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px!global<span class="token property">width</span><span class="token punctuation">:</span> $width<span class="token number">.</span>bottom-content<span class="token property">width</span><span class="token punctuation">:</span> $width</code></pre></li></ul><ol start="6"><li>当你的样式变得越来越复杂，你需要大段的重用样式的代码，独立的变量就没办法应付这种情况了。你可以通过<strong>Sass</strong>的混合器实现大段样式的重用。</li></ol><ul><li>混合器使用<code>@mixin</code>标识符定义：<pre class=" language-css"><code class="language-css">@mixin field-label<span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#020202</span>\</code></pre></li><li>使用<code>@include</code>来引用混合器<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content-title@include field-label</code></pre></li></ul><ol start="7"><li><strong>Sass</strong>中的数字运算</li></ol><ul><li><strong>Sass</strong>支持<code>(+, -, *,  / ,%)</code>运算，如果必要会在不同单位间转换值。<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>px + <span class="token number">4</span>pt</code></pre></li><li>在 CSS 中通常起到分隔数字的用途，<strong>Sass</strong>同时也赋予了<code>/</code>除法运算的功能。<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content<span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>px / <span class="token number">5</span>px</code></pre></li><li>如果需要使用变量，同时又要确保<code>/</code>不做除法运算而是完整地编译到 CSS 文件中，只需要用 <code>#&#123;&#125;</code>插值语句将变量包裹。<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content$<span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>$<span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token property">font</span><span class="token punctuation">:</span> #&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>$font-size&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>/#&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>$line-height&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li></ul><ol start="8"><li><strong>Sass</strong>的颜色运算<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.75</span><span class="token punctuation">)</span> + <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">0.75</span><span class="token punctuation">)</span></code></pre></li></ol><ul><li>编译为<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">0.75</span><span class="token punctuation">)</span></code></pre></li></ul><ol start="9"><li>圆括号<code>()</code>用于运算<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>em + <span class="token punctuation">(</span><span class="token number">2</span>em * <span class="token number">3</span><span class="token punctuation">)</span></code></pre></li><li><strong>Sass</strong>的函数运用</li></ol><ul><li>Css语句调用函数<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">100%</span>, <span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>编译为<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0000</span></code></pre></li><li><strong>Sass</strong> 函数允许使用关键词参数 (keyword arguments)，上面的例子也可以写成：<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>$<span class="token property">hue</span><span class="token punctuation">:</span> <span class="token number">0</span>, $<span class="token property">saturation</span><span class="token punctuation">:</span> <span class="token number">100%</span>, $<span class="token property">lightness</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">)</span></code></pre>关键词参数给函数提供了更灵活的接口（通过外部传参来控制函数执行效果）。关键词参数可以打乱顺序使用，如果使用默认值也可以省缺，另外，参数名被视为变量名，下划线、短横线可以互换使用。</li></ul><ol start="11"><li><strong>Sass</strong>导入样式</li></ol><ul><li>传统的CSS具有<code>@import</code>导入功能，但是在项目加载时，<code>@import</code>不会最先加载，导致页面显示的样式会存在j加载顺序的问题导致卡顿，但是<strong>Sass</strong>完美解决了问题，在项目加载时就会运行<code>@import</code>。被导入的<strong>Sass</strong>和<strong>Scss</strong>会编译为一个<strong>CSS</strong>文件，被导入的文件中所包含的变量或者混合指令<code>@mixin</code> 都可以在导入的文件中使用。</li><li>被导入的文件最好附带拓展名，例如·<code>.scss </code>或<code> .sass</code>。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为<code> .scss</code>或 <code>.sass</code>的文件并将其导入。<pre class=" language-css"><code class="language-css">// 推荐写法<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"global.scss"</span><span class="token punctuation">;</span></span>// 或者<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"global"</span><span class="token punctuation">;</span></span></code></pre></li><li><strong>Sass</strong> 允许同时导入多个文件<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"global.scss"</span>, <span class="token string">"vuetify.sass"</span><span class="token punctuation">;</span></span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>Sass</strong>的缩进语法在实际开发过程中会更高效，但是一定要格外注意缩进的使用，尤其是在父选择器和子选择器的情景下。<strong>Sass</strong>自带的缩写语法很方便，但是要求使用者有规范的命名习惯，不然sass代码增加过后会很难定位，好的解决办法是加注释，这样对后来者更user friendly。<br><strong>Scss</strong>在功能上和<strong>Sass</strong>并无区别，但是<strong>Scss</strong>更加贴近CSS，对大多数开发者而言也更熟悉。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
