<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lodash</title>
      <link href="/2022/12/03/lodash/"/>
      <url>/2022/12/03/lodash/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><blockquote><p>lodash是一个JS库，一个让<code>javascript</code>使用起来更简单的工具，它可以对<code>Number</code>,<code>String</code>,<code>Object</code>,<code>Array</code>等进行简单或复杂的操作，减少代码量</p></blockquote><h2 id="二、安装和引用"><a href="#二、安装和引用" class="headerlink" title="二、安装和引用"></a>二、安装和引用</h2><pre class=" language-script"><code class="language-script">$ npm i --save lodash</code></pre><ul><li>项目中引用<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>_<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li>全局挂载<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> lodash <span class="token keyword">from</span> <span class="token string">"lodash"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_ <span class="token operator">=</span> lodash</code></pre></li></ul><h2 id="三、常用的方法"><a href="#三、常用的方法" class="headerlink" title="三、常用的方法"></a>三、常用的方法</h2><h3 id="01-判断类型"><a href="#01-判断类型" class="headerlink" title="01 判断类型"></a>01 判断类型</h3><ul><li><code>isNumber</code> – 判断值是否为数字类型<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>_<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li><li><code>isString</code> – 判断值是否为字符串类型<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>_<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li><li><code>isObject</code> – 判断值是否为对象<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>_<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>_<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li><li><code>isArray</code> – 判断值是否为对象<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>_<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token string">'fdsa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li><li><code>isUndefined</code> – 判断值是否是undefined<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>_<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li><li><code>isNull</code> – 判断值是否是null<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>_<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li><li><code>isFunction</code> – 判断值是否是fuction<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>_<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token regex">/abc/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li></ul><h3 id="02-转换类型"><a href="#02-转换类型" class="headerlink" title="02 转换类型"></a>02 转换类型</h3><ul><li><code>toArray</code> – 转换值为数组<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[1, 2]</span>_<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回['a', 'b', 'c']</span>_<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[]</span>_<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[]</span></code></pre></li><li><code>toInteger</code> – 转换值为整数<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回3</span>_<span class="token punctuation">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span><span class="token string">'3.2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回3</span></code></pre></li><li><code>toString</code> – 转换值为字符串<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回'3.2'</span>_<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 ''</span>_<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 '1,2,3'</span></code></pre></li></ul><h3 id="03-操作数组"><a href="#03-操作数组" class="headerlink" title="03 操作数组"></a>03 操作数组</h3><ul><li><code>_.concat</code> – 创建一个新数组，将array与任何数组或值拼接在一起。<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> other <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会改变原数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[1, 2, 3, [4]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[1]</span></code></pre></li><li><code>_.drop</code> – 去除array前面的n个元素(n默认值为1), 返回的是一个新数组<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => [2, 3] n默认为1，所以去掉第一位</span>_<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => [3]</span>_<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => []</span>_<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => [1, 2, 3]</span></code></pre></li><li><code>_.uniq</code> – 获得==去重==后的新数组<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">uniq</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [2, 1];</span></code></pre></li><li><code>_.reverse</code> – 将数组的元素顺序==反转==，返回一个新数组<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>_<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [3, 2, 1] </span></code></pre></li><li><code>_.pull</code> – 移除在数组中指定的值（传参）<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>_<span class="token punctuation">.</span><span class="token function">pull</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [1, 1]</span></code></pre></li></ul><h3 id="04-遍历集合"><a href="#04-遍历集合" class="headerlink" title="04 遍历集合"></a>04 遍历集合</h3><ul><li><code>forEach</code>遍历数组或对象<blockquote><p><code>_.forEach(collection, [iteratee=_.identity])</code>，collection传入的是需要遍历的数组或对象，iteratee为返回类型，提供三个参数，<code>value</code>, <code>index|key</code>, <code>collection</code></p></blockquote></li></ul><p>遍历数组：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cake'</span><span class="token punctuation">,</span> <span class="token string">'fruit'</span><span class="token punctuation">,</span> <span class="token string">'rice'</span><span class="token punctuation">,</span> <span class="token string">'soup'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 以下为两种写法，返回值一样</span><span class="token function">_</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// value为数组每一项的值，index是对应的索引，collection是整个数组</span></code></pre><p>返回：<br><img src="https://img-blog.csdnimg.cn/2b27b0f4eb12454fbdb3571544ddb1ec.png" alt="返回结果"></p><p>遍历对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'cake'</span><span class="token punctuation">,</span> taste<span class="token punctuation">:</span><span class="token string">'sweet'</span><span class="token punctuation">,</span> flavor<span class="token punctuation">:</span><span class="token string">'flour'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span><span class="token string">'15'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 以下为两种写法，返回值一样</span><span class="token function">_</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// value为对象每一属性的值，key是对应的属性名，collection是整个对象</span></code></pre><p>返回：<br><img src="https://img-blog.csdnimg.cn/dc652c6ab3d0417fb8eb407ef021981c.png" alt="返回结果"></p><h3 id="05-函数（防抖、节流）"><a href="#05-函数（防抖、节流）" class="headerlink" title="05 函数（防抖、节流）"></a>05 函数（防抖、节流）</h3><ul><li>防抖函数<code>_.debounce(func, [wait=0], [options=])</code><blockquote><p>防抖函数，通俗来讲，就是在某段时间内，不管触发多少次函数，只认最后一次，例如：淘宝搜索栏，但你打完最后一个字，才会触发搜索功能。<code>loadash</code>的<code>debounce</code>函数接收三个参数，第一个参数是要执行的函数体，第二参数是设置的时间范围，第三参数可传入选项<code>leading</code>（默认为false，用来设置function是否在延迟开始之前调用） 、<code>trailing</code>（默认为true，用来设置function是否在延迟结束后调用）、<code>maxWait</code>(function允许被延迟的最大值)</p></blockquote></li></ul><p>这里是在Vue项目中使用的示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"clickBtn"</span><span class="token operator">></span>防抖<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>   clickBtn<span class="token punctuation">:</span>_<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>     clickBtn<span class="token punctuation">:</span>_<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'leading'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">'trailing'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>连续点击按钮多次，一秒之后只打印一个<code>111</code></p></blockquote><pre class=" language-javascript"><code class="language-javascript">   clickBtn<span class="token punctuation">:</span>_<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'leading'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">'trailing'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>设置<code>leading</code>为true，在点击按钮后立马打印<code>111</code>，且在规定时间内只打印一次</p></blockquote><ul><li>节流函数<code>_.throttle(func, [wait=0], [options=])</code><blockquote><p>同理，节流函数就是在定义的一段时间内，不管触发多少次函数，只执行一次回调（只认第一次触发）。<code>throttle</code>也是接收三个参数，但是第三参数<code>options</code>只有两个选项：<code>leading</code>、<code>trailing</code>，默认都为<code>true</code></p></blockquote></li></ul><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"clickBtn"</span><span class="token operator">></span>节流<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>   clickBtn<span class="token punctuation">:</span>_<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>因为<code>throttle</code>的<code>leading</code>和<code>trailing</code>都默认为<code>true</code>，所以在第一次点击时会立即打印<code>111</code>，并且在设置时间内（代码为2秒），再次点击按钮，则会在两秒之后打印<code>111</code>。想要实现不同的节流效果，自行设置<code>leading</code>、<code>trailing</code>即可</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JS Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moment-timezone.js</title>
      <link href="/2022/11/20/moment-timezone/"/>
      <url>/2022/11/20/moment-timezone/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>moment.timezone</code>是<code>moment</code>额外封装的一个插件，专门用于修改时区，具有部分moment的方法。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-script"><code class="language-script">npm install moment-timezone//或yarn add moment-timezone</code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment-timezone'</span></code></pre><blockquote><p>上一篇文章中已经讲解了<code>moment</code>的用法，这里的引入的<code>moment</code>是<code>moment-timezone</code>的实例，如果同一文件下同时引入<code>moment</code>和<code>moment-timezone</code>，则需要区别实例名字。<br>例如：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 这里使用momentTz是为了区别于moment的实例，你也可以取其他名字作为moment-timezone的实例</span><span class="token keyword">import</span> momentTz <span class="token keyword">from</span> <span class="token string">'moment-timezone'</span><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment-timezone'</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里拿到的就是美国洛杉矶的当地时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回2022-10-31 09:00:00，洛杉矶与北京的时差为16小时</span></code></pre><ul><li>提示：以下两种书写方式返回的不一样<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> time1 <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"2013-11-18 11:55"</span><span class="token punctuation">,</span> <span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> time2 <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">"2013-11-18 11:55"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tz</span><span class="token punctuation">(</span><span class="token string">"America/Los_Angeles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>time1 返回的是这个时间附带上洛杉矶时区名字（并没有切换时间到洛杉矶时区）<br>time2 返回的是切换到洛杉矶时区后的时间</p></blockquote></li></ul><h2 id="默认时区"><a href="#默认时区" class="headerlink" title="默认时区"></a>默认时区</h2><ul><li>更换默认时区，之后获得的时间都是重置之后时区的时间<pre class=" language-javascript"><code class="language-javascript">moment<span class="token punctuation">.</span>tz<span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token string">"America/New_York"</span><span class="token punctuation">)</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回的是纽约的当地时间</span></code></pre></li><li>想要恢复当地的默认时区，则不带参数调用<pre class=" language-javascript"><code class="language-javascript">moment<span class="token punctuation">.</span>tz<span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="可选时区"><a href="#可选时区" class="headerlink" title="可选时区"></a>可选时区</h2><blockquote><p><a href="http://momentjs.cn/timezone/">官网</a>提供了能转换的所有时区，以地图的形式展示。<br><img src="https://img-blog.csdnimg.cn/6820453935cd424d96447833b189b58c.png" alt="官网全球时区图"></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moment.js</title>
      <link href="/2022/11/20/momentjs/"/>
      <url>/2022/11/20/momentjs/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h2><h3 id="01-安装"><a href="#01-安装" class="headerlink" title="01 安装"></a>01 安装</h3><pre class=" language-script"><code class="language-script">npm install moment</code></pre><h3 id="02-引入"><a href="#02-引入" class="headerlink" title="02 引入"></a>02 引入</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 或者</span><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span></code></pre><h2 id="二、常用的moment方法"><a href="#二、常用的moment方法" class="headerlink" title="二、常用的moment方法"></a>二、常用的moment方法</h2><h3 id="01-获取当前时间"><a href="#01-获取当前时间" class="headerlink" title="01 获取当前时间"></a>01 获取当前时间</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不传入值，返回的则是当前时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回的是一个对象，对象包含了当前的时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这样返回的才是时间，例如：2022-11-14T18:36:32+08:00</span></code></pre><h3 id="02-格式化时间"><a href="#02-格式化时间" class="headerlink" title="02 格式化时间"></a>02 格式化时间</h3><ul><li><p>字符规则<br><img src="https://img-blog.csdnimg.cn/6b8415c139e7446382316739650b0265.png"><br><img src="https://img-blog.csdnimg.cn/81c15ac1b85743c48ce3f45098b3e941.png"></p></li><li><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回2022-11-15，因为moment()没传参，返回的是当前时间</span></code></pre></li><li><p>格式化指定的时间（年月日）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-25</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DDDD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-359</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YY-MM-DD'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为98-12-25</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD-Q'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-25-4</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-Do'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-12-25th</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MMM-Do'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-Dec-25th</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MMMM-Do'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为1998-December-25th</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为914515200</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'1998.12.25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为914515200000,毫秒时间戳</span></code></pre></li><li><p>格式化指定的时间（时分秒）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为14:19:41</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'hh:mm:ss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  输出为02:19:41</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm:ss a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出为14:19:41 pm</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm:ss A'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  输出为14:19:41 PM</span></code></pre></li></ul><h3 id="03-转换时间戳"><a href="#03-转换时间戳" class="headerlink" title="03 转换时间戳"></a>03 转换时间戳</h3><blockquote><p>有两种方式转换时间戳，<code>moment().valueOf()</code>转换为毫秒数和<code>moment.unix()</code>转换为秒数</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回当前时间的毫秒时间戳</span><span class="token comment" spellcheck="true">// moment接收的是毫秒数，unix返回为秒数</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1318781876</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回值1318781</span><span class="token comment" spellcheck="true">//moment也能接收其他格式的时间，将之转换为时间戳</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022/3/28'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回1648396800</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022/3/28'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回1648396800000</span></code></pre><h3 id="04-get-获取时间"><a href="#04-get-获取时间" class="headerlink" title="04 get()获取时间"></a>04 get()获取时间</h3><ul><li>获取年份<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回2022</span></code></pre></li><li>获取月份<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回0-11，假设当前12月，返回值就是11</span></code></pre></li><li>获取日期<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回当前月份的天数，11.17则返回17</span></code></pre></li><li>获取时分秒<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'hour'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'minute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>获取当月的天数<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">daysInMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回当前月份的天数</span></code></pre></li></ul><h3 id="05-操作moment"><a href="#05-操作moment" class="headerlink" title="05 操作moment"></a>05 操作moment</h3><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><ul><li>示例：<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在当前时间的基础上往后顺延7天，假设今天2022/11/17,返回的结果应是2022/11/24</span><span class="token comment" spellcheck="true">// 另一种写法</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 链式写法</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'months'</span><span class="token punctuation">)</span></code></pre></li><li>可选键位表<br><img src="https://img-blog.csdnimg.cn/2ad98619ce564b1aac0186b3451ce384.png"></li></ul><h4 id="subtract"><a href="#subtract" class="headerlink" title="subtract()"></a>subtract()</h4><ul><li>与<code>add()</code>使用方法相同，键位也是一样<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或者</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="startOf"><a href="#startOf" class="headerlink" title="startOf"></a>startOf</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//一年的最开始，例如：2022/1/1 00:00:00</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 某个月的最开始 2022/11/01 00:00:00</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'quarter'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前季度的开始，2022-10-01 00:00:00(当前11月)</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'week'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 本周的第一天</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当天的0点</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//跟day一样，当天的0点</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前小时的最开始</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前分钟的最开始</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前秒的最开始</span></code></pre><h4 id="endOf"><a href="#endOf" class="headerlink" title="endOf"></a>endOf</h4><ul><li>跟 <code>startOf</code>同样的用法<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2022-12-31 23: 59: 59</span></code></pre></li></ul><h3 id="06-比较moment-查询moment"><a href="#06-比较moment-查询moment" class="headerlink" title="06 比较moment(查询moment)"></a>06 比较moment(查询moment)</h3><h4 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore"></a>isBefore</h4><ul><li>查询某个时间是否在另一时间之前<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个moment是否在before里的时间之前</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span></code></pre></li><li><code>isBefore</code>接收第二个参数，作为比较的精度<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 两个时间只比较年份的先后</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回false</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token comment" spellcheck="true">// 也可比较月份，日期，小时, 分钟，秒</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-10-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-18'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 17:53:24'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 18:53:24'</span><span class="token punctuation">,</span> <span class="token string">'hour'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 17:54:24'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 18:53:24'</span><span class="token punctuation">,</span> <span class="token string">'minute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回false</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 17:53:23'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token string">'2022-11-17 18:53:24'</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回true</span></code></pre></li></ul><h4 id="isSame"><a href="#isSame" class="headerlink" title="isSame"></a>isSame</h4><ul><li>查询两个时间是否一致，用法跟<code>isBefore</code>一样，接收第二个参数作为比较精度<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 比较精度</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span></code></pre></li><li>跟<code>isBefore</code>不一样的是，当接收第二个参数时，会比较精度之前的时间，例如：传入day为第二参数，会比较day之前的month和year，只有完全一样才会返回为true<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-07-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li></ul><h4 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter"></a>isAfter</h4><ul><li>用于比较moment在某个时间之后，跟<code>isSame</code>一样，使用day为第二参数，将会检查年份、月份、日期。<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2021-11-19'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token string">'2021-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-07-18'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre></li></ul><h4 id="isSameOrBefore和isSameOrAfter"><a href="#isSameOrBefore和isSameOrAfter" class="headerlink" title="isSameOrBefore和isSameOrAfter"></a>isSameOrBefore和isSameOrAfter</h4><ul><li><code>isSameOrBefore</code>判断是否一样或在某个时间之前，等同于<code>&gt;=</code>和<code>&lt;=</code>，第二参数会精准比较<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-10-20'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSameOrBefore</span><span class="token punctuation">(</span><span class="token string">'2021-12-31'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li><li><code>isSameOrBefore</code>判断是否一样或在某个时间之后，第二参数会精准比较<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-10-20'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSameOrAfter</span><span class="token punctuation">(</span><span class="token string">'2023-12-31'</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li></ul><h4 id="isBetween"><a href="#isBetween" class="headerlink" title="isBetween"></a>isBetween</h4><ul><li><code>isBetween</code>接收两个时间参数作为范围，比较moment是否在这个范围之内<pre class=" language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token string">'2022-11-17'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBetween</span><span class="token punctuation">(</span><span class="token string">'2022-11-10'</span><span class="token punctuation">,</span> <span class="token string">'2022-11-25'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>currency.js</title>
      <link href="/2022/11/19/currency/"/>
      <url>/2022/11/19/currency/</url>
      
        <content type="html"><![CDATA[<h2 id="一、用途"><a href="#一、用途" class="headerlink" title="一、用途"></a>一、用途</h2><blockquote><p><code>currency</code>可用于货币与数字之间的转换，还可用于数值的加减乘除（主要解决的是浮点数的问题）</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token comment" spellcheck="true">// 返回结果0.30000000000000004</span><span class="token comment" spellcheck="true">// 用curreny进行运算</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回0.3</span></code></pre><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><pre class=" language-script"><code class="language-script">npm install --save currency.js// 或者yarn add currency.js</code></pre><h2 id="三、引入"><a href="#三、引入" class="headerlink" title="三、引入"></a>三、引入</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> currency <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'currency.js'</span><span class="token punctuation">)</span></code></pre><h2 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h2><h3 id="01-转换货币格式"><a href="#01-转换货币格式" class="headerlink" title="01 转换货币格式"></a>01 转换货币格式</h3><ul><li>默认转为美元格式<code>$</code><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//$1,000.00</span></code></pre></li><li>自定义货币格式<blockquote><p>用<code>&#123;&#125;</code>囊括配置项<br><code>precision</code>指代精确到小数点哪一位，可选0，1，2…<br><code>symbol</code>则是数字前的符号，一般配置货币符号<br><code>decimal</code>选项是配置小数点那一位的符号（替换小数点）<br><code>separator</code>指代分隔符，按照三位数一个分隔符来格式化</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">1000.12</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>precision<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">'¥'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ¥1,000</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">1000.12</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>symbol<span class="token punctuation">:</span> <span class="token string">'€'</span><span class="token punctuation">,</span> decimal<span class="token punctuation">:</span> <span class="token string">','</span><span class="token punctuation">,</span> separator<span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// €1.000,12</span></code></pre></li></ul><h3 id="02-返回值类型"><a href="#02-返回值类型" class="headerlink" title="02 返回值类型"></a>02 返回值类型</h3><ul><li>value<blockquote><p>返回的是原本的值，返回类型是==number==, 输入字符串类型的数字也会转==number==</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token comment" spellcheck="true">// 返回121.3</span></code></pre></li><li>intValue<blockquote><p>把小数点后两位的数字转为整数（相当于乘以一百），并且会把小数点第三位的数字四舍五入到第二位。先四舍五入，再乘100</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回1213</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回12134</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.344</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回12134</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.349</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回12135</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token comment" spellcheck="true">// 返回8000</span></code></pre></li><li>dollar<blockquote><p>去掉小数后面的值，返回整数，不进行四舍五入</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dollars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 121</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">0.45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dollars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 0</span></code></pre></li><li>cents<blockquote><p>去掉小数点之前的值，返回小数点之后的整数</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 34</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">0.45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回 45</span></code></pre></li></ul><h3 id="03-运算"><a href="#03-运算" class="headerlink" title="03 运算"></a>03 运算</h3><blockquote><p><code>curreny</code>提供的数字运算支持负数运算</p></blockquote><ul><li>add （加）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">121.34</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回  "123.35"</span><span class="token comment" spellcheck="true">// 负数运算</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回  "80"</span></code></pre></li><li>subtract（减）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 120</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -320</span></code></pre></li><li>multiply （乘）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 246.9</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span></code></pre></li><li>divide （除）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 120</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -120</span></code></pre></li><li>distribute （均分）<pre class=" language-javascript"><code class="language-javascript"><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [8, 8, 8]</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [7.67, 7.67, 7.66]</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuetify学习记录（三）-- v-data-table</title>
      <link href="/2022/10/29/vuetify-study-note-section-three/"/>
      <url>/2022/10/29/vuetify-study-note-section-three/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在我接触Vuetify以来，<code>v-data-table</code>是我用的最频繁的组件之一。总的来说，<code>v-data-table</code>延续了Vuetify的特点，功能强大且稳定，找不出什么bug，但是官方文档的说明并不是特别友好，具体的使用技巧只能靠个人领悟。</p></blockquote><h2 id="一、基础属性"><a href="#一、基础属性" class="headerlink" title="一、基础属性"></a>一、基础属性</h2><ul><li>数据想要正常显示的关键属性<code>items</code>和<code>headers</code><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table   <span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span><span class="token comment" spellcheck="true">// 绑定的表头, 每一列的数据类名</span>   <span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span><span class="token comment" spellcheck="true">// 绑定的数据数组，用于展示每一行的数据</span>   <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre>绑定的数据写在data里面:<pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">'Dessert (100g serving)'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//表头显示的文本</span>      align<span class="token punctuation">:</span> <span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文本对齐方向</span>      sortable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//控制切换排序的功能</span>      value<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//对应的值</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Calories'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'calories'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Fat (g)'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'fat'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Carbs (g)'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'carbs'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  desserts<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'Frozen Yogurt'</span><span class="token punctuation">,</span>      calories<span class="token punctuation">:</span> <span class="token number">159</span><span class="token punctuation">,</span>      fat<span class="token punctuation">:</span> <span class="token number">6.0</span><span class="token punctuation">,</span>      carbs<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'KitKat'</span><span class="token punctuation">,</span>      calories<span class="token punctuation">:</span> <span class="token number">518</span><span class="token punctuation">,</span>      fat<span class="token punctuation">:</span> <span class="token number">26.0</span><span class="token punctuation">,</span>      carbs<span class="token punctuation">:</span> <span class="token number">65</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>展示效果如下：<br><img src="https://img-blog.csdnimg.cn/21d4093aa0ac4dea959b509226c6acc5.png"><blockquote><p>这里仅做数据展示的相关属性介绍，其他的属性皆可通过官方文档操作。<br><a href="https://vuetifyjs.com/zh-Hans/api/v-data-table/#links">官方文档地址</a></p></blockquote></li></ul><h2 id="二、事件绑定"><a href="#二、事件绑定" class="headerlink" title="二、事件绑定"></a>二、事件绑定</h2><blockquote><p><code>v-data-table</code>提供对应的事件可用于组件之上。</p></blockquote><h3 id="1-click-row"><a href="#1-click-row" class="headerlink" title="1. click:row"></a>1. click:row</h3><p><img src="https://img-blog.csdnimg.cn/10481cd95b6546a08941d3f40a8c9470.png"></p><blockquote><p><code>click:row</code>方法是点击每一行所触发的效果，方法提供两个参数，第一个是当前点击行的数据，第二个参数展示的更加具体的数据，例如当前数据行是否展开，是否被选中。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>      <span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table          <span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span>          <span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span>          item<span class="token operator">-</span>key<span class="token operator">=</span><span class="token string">"name"</span>          @click<span class="token punctuation">:</span>row<span class="token operator">=</span><span class="token string">"onClickRow"</span> <span class="token comment" spellcheck="true">// 如果想要获取该方法的返参，最好不要用function()带括号的写法，那样会报错</span>      <span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    desserts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 每一行的数据</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 数据表格的表头</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">onClickRow</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item）      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obeject<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>下面是返回参数<br>第一个item参数：<br><img src="https://img-blog.csdnimg.cn/0db01c80959448d09fe86cdfc4bcbef5.png"><br>第二个object参数：<br><img src="https://img-blog.csdnimg.cn/6f5a27b91d1246029d933868b9b0a81b.png"></li></ul><h3 id="2-contextmenu-row（右键单击）和dblclick-row（双击）"><a href="#2-contextmenu-row（右键单击）和dblclick-row（双击）" class="headerlink" title="2. contextmenu:row（右键单击）和dblclick:row（双击）"></a>2. contextmenu:row（右键单击）和dblclick:row（双击）</h3><blockquote><p><code>contextmenu:row</code>（右键单击）和<code>dblclick:row</code>（双击）这两个事件的参数一致，第一个参数都是返回的MouseEvent，第二个参数跟<code>click:row</code>的一致。</p></blockquote><ul><li>具体代码书写不做赘述，跟<code>click:row</code>写法一致，以下是<code>MouseEvent</code>的返参:<br><img src="https://img-blog.csdnimg.cn/64761fd68037423f86f66eb6211461c2.png"></li></ul><blockquote><p><code>v-data-table</code>还有诸多方法提供，使用步骤跟上面一致，根据具体需求场景来引用即可。</p></blockquote><h2 id="三、插槽的使用"><a href="#三、插槽的使用" class="headerlink" title="三、插槽的使用"></a>三、插槽的使用</h2><blockquote><p>Vuetify的组件给我的感觉是强大而稳定，正因为稳定，所以在之前的旧版本，想要自定义修改一些样式显得很困难。但是，现在的vuetify提供的插槽基本能满足大部分自定义样式的需求。</p></blockquote><h3 id="1-body-自定义整个表格"><a href="#1-body-自定义整个表格" class="headerlink" title="1. body(自定义整个表格)"></a>1. body(自定义整个表格)</h3><ul><li><p>官方文档<br><img src="https://img-blog.csdnimg.cn/b78e620572e541b8a8c6fbe1e240f3b4.png"></p></li><li><p>相当于替换整个数据表的<code>&lt;tbody&gt;</code>，具体写法如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"layouts.settings.headers"</span><span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"layouts.data.paymentInstallment"</span><span class="token operator">></span><span class="token operator">&lt;</span>template  v<span class="token operator">-</span>slot<span class="token punctuation">:</span>body<span class="token operator">=</span><span class="token string">"{ items }"</span> <span class="token comment" spellcheck="true">//这里放置的items就是上面绑定的数据数组</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//这里插入自定义的表格体</span>  <span class="token operator">&lt;</span>tbody<span class="token operator">></span>    <span class="token operator">&lt;</span>tr       v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in items"</span>       <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span>       <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pa-6 red--text text-uppercase"</span><span class="token comment" spellcheck="true">// 自定义的样式</span>    <span class="token operator">></span> <span class="token comment" spellcheck="true">// 遍历数组里面的对象，才能在每一个单元格内展示数据</span>      <span class="token operator">&lt;</span>td<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>calories<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>fat<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>carbs<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/ca8e9e8afe70446a8d22977dbaba12cb.png"></p></li></ul><h3 id="2-item-name（自定义某一列数据）"><a href="#2-item-name（自定义某一列数据）" class="headerlink" title="2. item.name（自定义某一列数据）"></a>2. item.name（自定义某一列数据）</h3><blockquote><p>如果要修改整个表格的样式，建议使用<code>body</code>插槽，如果只是单纯的修改某一列的内容或格式，可以使用<code>item.name</code>，这个插槽允许修改某一列数据的样式。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table  <span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span>  <span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span>  <span class="token operator">></span>    <span class="token comment" spellcheck="true">// 我们要修改的是calories这一列的数据，所以使用item.calories</span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>item<span class="token punctuation">.</span>calories<span class="token operator">=</span><span class="token string">"{ item }"</span><span class="token operator">></span>      <span class="token comment" spellcheck="true">//这里用的v-chip仅是实例，你还可以换checkbox,button等等</span>      <span class="token operator">&lt;</span>v<span class="token operator">-</span>chip<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>calories <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>chip<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre><blockquote><p>注意：官方文档推荐的方法如上所示，但是可能会因为eslint版本的问题而报错。<br><img src="https://img-blog.csdnimg.cn/0af310a24f5848f89177eaad8137bf3b.png"></p></blockquote><p>别着急，我们可以换一种写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table  <span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span>  <span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span>  <span class="token operator">></span>    <span class="token comment" spellcheck="true">// 换一种写法</span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token template-string"><span class="token string">`item.calories`</span></span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"{ item }"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//原理是将item.calories修改为字符串</span>      <span class="token operator">&lt;</span>v<span class="token operator">-</span>chip<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>calories <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>chip<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/90710c994ca546b99986b27cbc296709.png"></p><h3 id="3-body-prepend，body-append（表格的头部和尾部插入内容）"><a href="#3-body-prepend，body-append（表格的头部和尾部插入内容）" class="headerlink" title="3. body.prepend，body.append（表格的头部和尾部插入内容）"></a>3. body.prepend，body.append（表格的头部和尾部插入内容）</h3><ul><li>body.prepend，头部插槽<blockquote><p>在表格的最顶部添加内容的插槽，一般的实用场景：在表头添加筛选器或者增删改查的操作按钮。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span><span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span><span class="token operator">></span> <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>body<span class="token punctuation">.</span>prepend<span class="token operator">></span> <span class="token comment" spellcheck="true">// 同理，eslint报错，换[`body.prepend`]</span>   <span class="token operator">&lt;</span>tr<span class="token operator">></span>     <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span>         <span class="token operator">&lt;</span>v<span class="token operator">-</span>text<span class="token operator">-</span>field          v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"calories"</span>          label<span class="token operator">=</span><span class="token string">"Less than"</span>         <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>text<span class="token operator">-</span>field<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>     <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token comment" spellcheck="true">// 2指的是后面剩余的单元格数</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre>展示效果：<br><img src="https://img-blog.csdnimg.cn/0f0e866eaeab4ca9b1746033121b6665.png"></li><li>body.append 表尾插槽<blockquote><p>用法跟<code>body.prepend</code>一样，<code>body.append</code>实在表格底部插入一行内容</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span><span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span><span class="token operator">></span> <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>body<span class="token punctuation">.</span>append<span class="token operator">></span> <span class="token comment" spellcheck="true">// 同理，eslint报错，换[`body.append`]</span>   <span class="token operator">&lt;</span>tr<span class="token operator">></span>     <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span>         <span class="token operator">&lt;</span>v<span class="token operator">-</span>text<span class="token operator">-</span>field          v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"calories"</span>          label<span class="token operator">=</span><span class="token string">"Less than"</span>         <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>text<span class="token operator">-</span>field<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>     <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token comment" spellcheck="true">// 2指的是后面需要填充的的单元格数</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre>展示效果：<br><img src="https://img-blog.csdnimg.cn/5a75b55221f94782955028b36e4e411f.png"></li></ul><h3 id="4-body-top（表格之上插入内容）"><a href="#4-body-top（表格之上插入内容）" class="headerlink" title="4. body.top（表格之上插入内容）"></a>4. body.top（表格之上插入内容）</h3><blockquote><p>要注意<code>body.top</code>和<code>body.prepend</code>的区别，插入内容的位置不同，<code>body.top</code>是在表格内，表头之上插入内容。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table  <span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span>  <span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>top<span class="token operator">></span>    <span class="token operator">&lt;</span>v<span class="token operator">-</span><span class="token keyword">switch</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"singleSelect"</span>      label<span class="token operator">=</span><span class="token string">"Single select"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span><span class="token keyword">switch</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre><p>展示效果：<br><img src="https://img-blog.csdnimg.cn/e6c70c02dc9c49b5b02e9217c51e483a.png"></p><h3 id="5-foot，footer（表格最底部插入内容）"><a href="#5-foot，footer（表格最底部插入内容）" class="headerlink" title="5. foot，footer（表格最底部插入内容）"></a>5. foot，footer（表格最底部插入内容）</h3><blockquote><p>官方文档提示不要混淆<code>foot</code>和<code>footer</code>插槽，两者的区别在于<code>foot</code>生成一个<code>&lt;tfoot&gt;</code>元素，是包含在<code>&lt;tbody&gt;</code>之内的，内容高度超出组件高度，<code>&lt;tfoot&gt;</code>会被。而<code>footer</code>是在<code>&lt;tbody&gt;</code>之外，始终固定在表格底部。</p></blockquote><ul><li>这里直接演示<code>footer</code>的示例，<code>foot</code>跟<code>body.append</code>差不多<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当前代码是给数据表格增加分页器的功能</span><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span><span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span>hide<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">-</span>footeritem<span class="token operator">-</span>key<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">:</span>page<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">"page"</span> <span class="token comment" spellcheck="true">//跟v-pagination的数据相绑定，用于控制页数的对照</span><span class="token punctuation">:</span>items<span class="token operator">-</span>per<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"itemsPerPage"</span> <span class="token comment" spellcheck="true">// 每一页数据的数量</span>@page<span class="token operator">-</span>count<span class="token operator">=</span><span class="token string">"pageCount = $event"</span><span class="token comment" spellcheck="true">// page-count是v-data-table的事件类型，跟v-pagination的length绑定</span><span class="token operator">></span><span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>footer<span class="token operator">></span>  <span class="token operator">&lt;</span>v<span class="token operator">-</span>pagination    v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"page"</span>    <span class="token punctuation">:</span>length<span class="token operator">=</span><span class="token string">"pageCount"</span>    <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>pagination<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre>效果如下：<br><img src="https://img-blog.csdnimg.cn/7937c3cb044e42b883843cfc3f63948b.gif#pic_center"></li></ul><h3 id="6-expanded-item（自定义扩展内容）"><a href="#6-expanded-item（自定义扩展内容）" class="headerlink" title="6. expanded-item（自定义扩展内容）"></a>6. expanded-item（自定义扩展内容）</h3><blockquote><p><code>expanded-item</code>让每一行数据可以展开，显示更详细的数据。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table  <span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span>  <span class="token punctuation">:</span>items<span class="token operator">=</span><span class="token string">"desserts"</span>  hide<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">-</span>footer  show<span class="token operator">-</span>expand <span class="token comment" spellcheck="true">// 控制是否展开切换</span>  <span class="token punctuation">:</span>single<span class="token operator">-</span>expand<span class="token operator">=</span><span class="token string">"true"</span> <span class="token comment" spellcheck="true">// 为true时，只能有一行数据可以展开，其他数据展开项关闭</span>  expand<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"$expand"</span> <span class="token comment" spellcheck="true">// 展开按钮的图标设置，默认是$expand,Vuetify的图标，必须加$修饰符，自行下载的图标库可以直接写名字，不加$</span>  item<span class="token operator">-</span>key<span class="token operator">=</span><span class="token string">"name"</span><span class="token comment" spellcheck="true">// 拿的是header的某一个属性名作为每一行数据的索引，没有索引会导致展开按钮会控制所有的数据行</span><span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>expanded<span class="token operator">-</span>item<span class="token operator">=</span><span class="token string">"{ headers, item }"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>td <span class="token punctuation">:</span>colspan<span class="token operator">=</span><span class="token string">"headers.length"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 这里是为了让展开的数据行跟原数据行长度一致</span>      More info about <span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 自定义需要展示的数据</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>data<span class="token operator">-</span>table<span class="token operator">></span></code></pre><p>展示效果如图：<br><img src="https://img-blog.csdnimg.cn/93f2157a1a2b4795829ee06cdc8fb5c6.png"></p><blockquote><p>展开符的位置默认在开头，如果想要控制在末尾或者某一列数据之后，则需要在<code>data</code>中绑定的<code>header</code>进行定义，如下所示。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    expanded<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        text<span class="token punctuation">:</span> <span class="token string">'Dessert (100g serving)'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//表头显示的文本</span>        align<span class="token punctuation">:</span> <span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文本对齐方向</span>        sortable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//控制切换排序的功能</span>        value<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Calories'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'calories'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Fat (g)'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'fat'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Carbs (g)'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'carbs'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'data-table-expand'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 插入空的表头定义，展示符会对号入座</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    desserts<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Frozen Yogurt'</span><span class="token punctuation">,</span>        calories<span class="token punctuation">:</span> <span class="token number">159</span><span class="token punctuation">,</span>        fat<span class="token punctuation">:</span> <span class="token number">6.0</span><span class="token punctuation">,</span>        carbs<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'KitKat'</span><span class="token punctuation">,</span>        calories<span class="token punctuation">:</span> <span class="token number">518</span><span class="token punctuation">,</span>        fat<span class="token punctuation">:</span> <span class="token number">26.0</span><span class="token punctuation">,</span>        carbs<span class="token punctuation">:</span> <span class="token number">65</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>展示效果：<br><img src="https://img-blog.csdnimg.cn/b79a433e73674db793b221f411572a20.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>以上内容是我在使用过程中的一些感悟和学习记录，文章并没有囊括所有的属性、方法和插槽，因为我觉得使用思路是相同的，<code>Vuetify3</code>已经上线，属性也在不断更新中，所以学会如何使用才是关键。所谓万变不离其宗，<code>v-data-table</code>的使用思路同样适用于其他<code>Vuetify</code>的UI组件</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vuetify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuetify学习记录（二）-- 标签属性和响应式</title>
      <link href="/2022/10/23/vuetify-study-note-section-two/"/>
      <url>/2022/10/23/vuetify-study-note-section-two/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开始使用Vuetify"><a href="#一、开始使用Vuetify" class="headerlink" title="一、开始使用Vuetify"></a>一、开始使用Vuetify</h2><h3 id="1-必写标签"><a href="#1-必写标签" class="headerlink" title="1. 必写标签"></a>1. 必写标签</h3><blockquote><p>上一篇博客中，我们已经安装了Vutify并进行了相关配置，但是在使用UI组件之前，一定要在顶层加上<code>v-app</code>标签，Vue项目中，最好在App.vue文件下加上，不然无法使用其他UI组件。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// App.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>v<span class="token operator">-</span>app<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>app<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h2 id="二、标签属性"><a href="#二、标签属性" class="headerlink" title="二、标签属性"></a>二、标签属性</h2><blockquote><p>我们平时写样式都是class名，vuetify为我们提供了全局可引用的属性，只需要在标签内绑定class即可使用</p></blockquote><h3 id="1-段落属性"><a href="#1-段落属性" class="headerlink" title="1. 段落属性"></a>1. 段落属性</h3><blockquote><p>Vuetify会有设置好的属性名，当你输入前几个字母时，会自动显示相对应的属性</p></blockquote><ul><li>代码示例：<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"display-4"</span><span class="token operator">></span>这是一段文本<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre></li><li>显示效果：<br><img src="https://img-blog.csdnimg.cn/328e19c68b0b4386b23a7bdab54a376c.png"></li><li>F12看属性值：<br><img src="https://img-blog.csdnimg.cn/59616847a29d4e938dff069ab5d6ae92.png"><blockquote><p>可选的属性还有<code>display-3</code>、<code>display-2</code>、<code>display-1</code>、<code>headline</code>、<code>title</code>、<code>subtitle-2</code>、<code>subtitle-1</code>、<code>body-2</code>、<code>body-1</code>、<code>caption</code>、<code>overline</code>，具体效果可以自己去尝试。</p></blockquote></li></ul><h3 id="2-颜色属性"><a href="#2-颜色属性" class="headerlink" title="2. 颜色属性"></a>2. 颜色属性</h3><ul><li>背景颜色<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>这是一块蓝色区域<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><img src="https://img-blog.csdnimg.cn/7ab99a9044224e95825a53221a9883f7.png"><br><img src="https://img-blog.csdnimg.cn/95da55dafbf6474987b7a8fef7662d1a.png"></li><li>字体颜色</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"blue orange--text"</span><span class="token operator">></span>这是一块蓝色区域和橘色文本<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a83d7c2e4f5b459099a41ffc5ea19ca1.png"><img src="https://img-blog.csdnimg.cn/a59977a5d5a94c0ba22b44c06dfdf53b.png"></p><h3 id="3-字体属性"><a href="#3-字体属性" class="headerlink" title="3. 字体属性"></a>3. 字体属性</h3><ul><li><p>字体大小</p><blockquote><p>用<code>text-value</code>来控制字体大小 value可选值: <code>h1</code>，<code>h2</code>，<code>h3</code>，<code>h4</code>，<code>h5</code>，<code>h6</code>，<code>subtitle-1</code>，<code>subtitle-2</code>，<code>body-1</code>，<code>body-2</code>，<code>button</code>，<code>caption</code>，<code>overline</code>。但这些值并不只是改<code>font-size</code>，会伴随其他属性的修改，例如：line-height</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"blue text-h1"</span><span class="token operator">></span>这是一段文本<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/64b96405ed034554870d1bfc75f623ad.png"><br><img src="https://img-blog.csdnimg.cn/c6d2224d5c1942c299305272c09f8fad.png"></p></li><li><p>字体粗细</p><blockquote><p>font-weight-value来设置</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"font-weight-black"</span><span class="token operator">></span>Black text<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"font-weight-bold"</span><span class="token operator">></span>Bold text<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"font-weight-medium"</span><span class="token operator">></span>Medium weight text<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"font-weight-regular"</span><span class="token operator">></span>Regular weight text<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"font-weight-light"</span><span class="token operator">></span>Light weight text<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"font-weight-thin"</span><span class="token operator">></span>Thin weight text<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/fa3456615aca469aa17a495071cd4458.png"></p></li><li><p>大小写转换</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 全换小写字母</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-lowercase"</span><span class="token operator">></span>Peter<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token comment" spellcheck="true">// 全换大写字母</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-uppercase"</span><span class="token operator">></span>Peter<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token comment" spellcheck="true">// 首字母大写</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-capitalize"</span><span class="token operator">></span>peter<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/09ccb97dc8564592adddb60b071bc9e8.png"></p></li></ul><ul><li><p>文本对齐</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 文本左对齐</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-left"</span><span class="token operator">></span>这是一段文字<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token comment" spellcheck="true">// 文本居中</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-center"</span><span class="token operator">></span>这是一段文字<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token comment" spellcheck="true">// 文本右对齐</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-right"</span><span class="token operator">></span>这是一段文字<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/775c861f2f74468f9ed9ef507df21818.png"></p></li><li><p>装饰线</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-decoration-none"</span><span class="token operator">></span> 无装饰的链接 <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-decoration-line-through"</span><span class="token operator">></span> 这是一段文字 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-decoration-overline"</span><span class="token operator">></span> 这是一段文字 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-decoration-underline"</span><span class="token operator">></span> 这是一段文字 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/6216bd1f30e84c55804dde5e853ff228.png"></p></li><li><p>文字透明度</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text--primary"</span><span class="token operator">></span> 这是一段文字 <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text--secondary"</span><span class="token operator">></span> 这是一段文字 <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text--disabled"</span><span class="token operator">></span> 这是一段文字 <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/8cf85b50fa2a4c7ba9d0e60334e1cce2.png"></p></li><li><p>文本换行和溢出</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-no-wrap secondary"</span> style<span class="token operator">=</span><span class="token string">"width: 8rem;"</span><span class="token operator">></span>这段文本会超出div的宽度，不会换行<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"green"</span> style<span class="token operator">=</span><span class="token string">"width: 8rem"</span><span class="token operator">></span>这段文本会换行<span class="token punctuation">,</span> 不会超出它所在div的宽度<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-truncate blue"</span> style<span class="token operator">=</span><span class="token string">"width: 8rem"</span><span class="token operator">></span>这段文本不会超出它所在div的宽度，多余的文字会省略<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/bf5c21bea2e446fbba4479448a08b3b1.png"></p></li></ul><h3 id="4-间距"><a href="#4-间距" class="headerlink" title="4. 间距"></a>4. 间距</h3><blockquote><p>当我们想调整间距，padding和margin，可引用<code>&#123;property&#125;&#123;direction&#125;-&#123;size&#125;</code>，例如：<code>pa-1</code>，对应的属性是: <code>padding: 4px</code> </p></blockquote><ul><li>property有两个值，m和p，分别对应margin和padding</li><li>direction的<code>t、l、b、r</code>分别对应四个方向，<code>x、y</code>对应X轴和Y轴，<code>a</code>代表四个方向同时修改成对应的值</li><li>value的值有0-16，n1-n16，auto，增量为<code>4px</code><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// pa是修改四个方向的padding值</span>pa<span class="token number">-1</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token punctuation">:</span> 4pxpa<span class="token number">-2</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token punctuation">:</span> 8px<span class="token operator">...</span>pa<span class="token number">-16</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token punctuation">:</span> 64px<span class="token comment" spellcheck="true">// px py 修改X、Y轴上的padding值</span>px<span class="token number">-1</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token operator">-</span>left<span class="token punctuation">:</span> 4px<span class="token punctuation">;</span> padding<span class="token operator">-</span>right<span class="token punctuation">:</span> 4pxpy<span class="token number">-1</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token operator">-</span>top<span class="token punctuation">:</span> 4px<span class="token punctuation">;</span> padding<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 4px<span class="token comment" spellcheck="true">// pl pr pt pb对应四个方向</span>pl<span class="token number">-1</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token operator">-</span>left<span class="token punctuation">:</span> 4pxpr<span class="token number">-1</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token operator">-</span>right<span class="token punctuation">:</span> 4pxpt<span class="token number">-1</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token operator">-</span>top<span class="token punctuation">:</span> 4pxpb<span class="token number">-1</span> <span class="token operator">=</span><span class="token operator">></span> padding<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 4px</code></pre></li><li>n1-n16只适用于margin，因为padding没有负值<pre class=" language-javascript"><code class="language-javascript">ma<span class="token operator">-</span>n1 <span class="token operator">=</span><span class="token operator">></span> margin<span class="token punctuation">:</span> <span class="token operator">-</span>4pxmx<span class="token operator">-</span>n16 <span class="token operator">=</span><span class="token operator">></span> margin<span class="token operator">-</span>left<span class="token punctuation">:</span> <span class="token operator">-</span>64px<span class="token punctuation">;</span> margin<span class="token operator">-</span>right<span class="token punctuation">:</span> <span class="token operator">-</span>64pxmy<span class="token operator">-</span>n16 <span class="token operator">=</span><span class="token operator">></span> margin<span class="token operator">-</span>top<span class="token punctuation">:</span> <span class="token operator">-</span>64px<span class="token punctuation">;</span> margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> <span class="token operator">-</span>64pxml<span class="token operator">-</span>n16 <span class="token operator">=</span><span class="token operator">></span> margin<span class="token operator">-</span>left<span class="token punctuation">:</span> <span class="token operator">-</span>64px</code></pre></li></ul><h2 id="三、响应式显示"><a href="#三、响应式显示" class="headerlink" title="三、响应式显示"></a>三、响应式显示</h2><h3 id="1-断点"><a href="#1-断点" class="headerlink" title="1. 断点"></a>1. 断点</h3><blockquote><p>断点是指vuetify根据设备窗口的大小来控制UI组件内容的大小，跟响应式同理，可应用于字体，颜色，布局等等。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8389702b7ebc48b49dd11041842618fd.png"></p><ul><li>这些断点属性都是Vuetify本身可访问的，我们可以通过<code>$vuetify.breakpoint.name</code>来访问</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>v<span class="token operator">-</span>card <span class="token punctuation">:</span>height<span class="token operator">=</span><span class="token string">"height"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>card<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//通过计算属性，根据窗口大小来动态改变card的高度</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      height <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$vuetify<span class="token punctuation">.</span>breakpoint<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token string">'xs'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">220</span>          <span class="token keyword">case</span> <span class="token string">'sm'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">400</span>          <span class="token keyword">case</span> <span class="token string">'md'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">500</span>          <span class="token keyword">case</span> <span class="token string">'lg'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">600</span>          <span class="token keyword">case</span> <span class="token string">'xl'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">800</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>响应式布局（断点作为参数出现在标签属性中）<blockquote><p>通过断点的属性，我们可以控制不同窗口尺寸下的布局格式。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 用padding举例</span><span class="token operator">&lt;</span>v<span class="token operator">-</span>card width<span class="token operator">=</span><span class="token string">"1600"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pa-xl-8 pa-lg-4 pa-md-8 pa-sm-12"</span><span class="token operator">></span>    <span class="token number">11111</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>card<span class="token operator">></span></code></pre>具体效果如下：<br><img src="https://img-blog.csdnimg.cn/cd9d4341799648c38697f02066786779.gif#pic_center"></li></ul><h3 id="2-断点控制显示和隐藏"><a href="#2-断点控制显示和隐藏" class="headerlink" title="2. 断点控制显示和隐藏"></a>2. 断点控制显示和隐藏</h3><ul><li><code>disaplay</code>: d-breakpoint-value作为标签属性来控制<br><img src="https://img-blog.csdnimg.cn/155cbb559f9541e58f605cad9409df50.png"></li></ul><p>示例1：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"success"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"d-flex"</span><span class="token operator">></span>可见提示<span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"success"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"d-none"</span><span class="token operator">></span>不可见提示<span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span></code></pre><p>渲染效果：<br><img src="https://img-blog.csdnimg.cn/75ccb3dcdbee4441a141c0468abaf80b.png"><br>示例2：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"info"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"d-none d-sm-none d-md-none d-lg-inline-block d-xl-none"</span><span class="token operator">></span>可见提示<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"error"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"d-none d-sm-none d-md-inline-block d-lg-none d-xl-none"</span><span class="token operator">></span>可见提示<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"success"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"d-none d-sm-inline-block d-md-none d-lg-none d-xl-none"</span><span class="token operator">></span>可见提示<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span></code></pre><p>渲染效果：<br><img src="https://img-blog.csdnimg.cn/85515c63071a4cc69672e07c1f3cc238.gif#pic_center"></p><ul><li>同理，也有<code>hidden</code>属性控制隐藏，<code>hidden-breakpoint-condition</code><blockquote><p><code>condition</code>的值有only、and-down、and-up</p></blockquote></li></ul><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"info"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hidden-md-only"</span><span class="token operator">></span>可见提示<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"error"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hidden-md-and-down"</span><span class="token operator">></span>可见提示<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span><span class="token operator">&lt;</span>v<span class="token operator">-</span>alert type<span class="token operator">=</span><span class="token string">"success"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hidden-md-and-up"</span><span class="token operator">></span>可见提示<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>alert<span class="token operator">></span></code></pre><p>渲染效果：<br><img src="https://img-blog.csdnimg.cn/9710505477454c5b8115ed8620a43095.gif#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vuetify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuetify学习记录（一）-- 安装和配置</title>
      <link href="/2022/10/18/vuetify-study-note-section-one/"/>
      <url>/2022/10/18/vuetify-study-note-section-one/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuetify安装"><a href="#Vuetify安装" class="headerlink" title="Vuetify安装"></a>Vuetify安装</h2><h3 id="1-不同的安装办法"><a href="#1-不同的安装办法" class="headerlink" title="1. 不同的安装办法"></a>1. 不同的安装办法</h3><ul><li>Vuetify官方推荐使用vue add命令安装<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 前提是已经运行vue create进行初始化项目，并且一定要cd到项目文件夹下</span>vue add vuetify</code></pre><blockquote><p>此方法适用于刚初始化的项目，会为你创建好vuetify需要用到的配置文件。如果是相对成熟的项目，尽量不要使用该命令，因为会改变项目结构，造成不必要的麻烦。</p></blockquote></li><li>通过npm或者yarn安装依赖<pre class=" language-script"><code class="language-script">npm install vuetify// 或者yarn add vuetify</code></pre>下一步安装sass文件依赖，<code>Vuetify样式建立在sass/scss上</code><pre class=" language-javascript"><code class="language-javascript">npm install sass@<span class="token operator">~</span><span class="token number">1.32</span> sass<span class="token operator">-</span>loader deepmerge <span class="token operator">-</span>D<span class="token comment" spellcheck="true">// 或者</span>yarn add sass@<span class="token operator">~</span><span class="token number">1.32</span> sass<span class="token operator">-</span>loader deepmerge <span class="token operator">-</span>D</code></pre><blockquote><p>但是我在这里遇到sass版本问题，以上是官网推荐的版本，如果出错，就下载以下版本</p></blockquote><pre class=" language-javascript"><code class="language-javascript">npm install sass<span class="token operator">-</span>loader@<span class="token number">7.3</span><span class="token punctuation">.</span><span class="token number">1</span> node<span class="token operator">-</span>sass@<span class="token number">4.14</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token comment" spellcheck="true">// 或者</span>yarn add sass<span class="token operator">-</span>loader@<span class="token number">7.3</span><span class="token punctuation">.</span><span class="token number">1</span> node<span class="token operator">-</span>sass@<span class="token number">4.14</span><span class="token punctuation">.</span><span class="token number">1</span></code></pre><a href="https://blog.csdn.net/qq_17555933/article/details/119463767?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-119463767-blog-105535229.t0_edu_mix&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-119463767-blog-105535229.t0_edu_mix&utm_relevant_index=1">问题解决来源</a></li></ul><h3 id="2-在main-js中引入"><a href="#2-在main-js中引入" class="headerlink" title="2. 在main.js中引入"></a>2. 在main.js中引入</h3><ul><li>如果只是单纯的引用Vuetify插件，不进行其他配置的话，用如下方法,，跟使用其他插件一样的方式<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> vuetify <span class="token keyword">from</span> <span class="token string">'vuetify'</span></code></pre></li><li>如果需要在项目里配置关于Vuetify的设置，则需要在vue实例中关联vuetify<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//如果是通过vue add安装的vuetify,会为你自动创建好配置文件</span><span class="token keyword">import</span> vuetify <span class="token keyword">from</span> <span class="token string">'./plugins/vuetify'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>vuetify<span class="token punctuation">,</span>render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li>如果使用Vuetify配置报错，可以尝试以下代码：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> vuetify <span class="token keyword">from</span> <span class="token string">'./plugins/vuetify'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>vuetify： <span class="token keyword">new</span> <span class="token class-name">Vuetify</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 这一段代码不一定必须，但是会解决一部分bug</span>render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="Vuetify全局配置"><a href="#Vuetify全局配置" class="headerlink" title="Vuetify全局配置"></a>Vuetify全局配置</h2><blockquote><p>如上文所示，我们可以对Vuetify进行全局配置，但是操作步骤必须把Vuetify和Vue实例化相结合</p></blockquote><h3 id="1-index-js文件配置"><a href="#1-index-js文件配置" class="headerlink" title="1. index.js文件配置"></a>1. index.js文件配置</h3><ul><li>在项目的plugins文件夹下新建vuetify文件夹，在<code>index.js</code>文件中进行配置，如果想要修改字体配置，加<code>iconfont</code>选项</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import '@mdi/font/css/materialdesignicons.css' // Ensure you are using css-loader</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuetify <span class="token keyword">from</span> <span class="token string">'vuetify/lib'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuetify<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuetify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  icons<span class="token punctuation">:</span> <span class="token punctuation">{</span>    iconfont<span class="token punctuation">:</span> <span class="token string">'mdiSvg'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 'mdi' || 'mdiSvg' || 'md' || 'fa' || 'fa4' || 'faSvg'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>这些都是Vuetify自带的字体样式，如果使用不了，则需要安装依赖来进行使用</p></blockquote><p>例如：</p><pre class=" language-javascript"><code class="language-javascript">npm install @mdi<span class="token operator">/</span>js <span class="token operator">-</span>D</code></pre><ul><li>Vuetify.config是一个包含修改全局引导配置的对象。<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vuetify <span class="token keyword">from</span> <span class="token string">'vuetify/lib'</span><span class="token comment" spellcheck="true">// silent 将停止所有的Vuetify日志和警告</span>Vuetify<span class="token punctuation">.</span>config<span class="token punctuation">.</span>silent <span class="token operator">=</span> <span class="token boolean">true</span></code></pre></li></ul><h3 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2. 主题配置"></a>2. 主题配置</h3><ul><li><code>theme</code>控制主题</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/plugins/vuetify/index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuetify <span class="token keyword">from</span> <span class="token string">'vuetify/lib'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuetify<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuetify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//应用暗色主题</span>  theme<span class="token punctuation">:</span> <span class="token punctuation">{</span> dark<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>自定义配置主题</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/plugins/vuetify/index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuetify <span class="token keyword">from</span> <span class="token string">'vuetify/lib'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuetify<span class="token punctuation">)</span><span class="token keyword">const</span> vuetify <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuetify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  theme<span class="token punctuation">:</span> <span class="token punctuation">{</span>    themes<span class="token punctuation">:</span> <span class="token punctuation">{</span>      light<span class="token punctuation">:</span> <span class="token punctuation">{</span>        primary<span class="token punctuation">:</span> <span class="token string">'#3f51b5'</span><span class="token punctuation">,</span>        secondary<span class="token punctuation">:</span> <span class="token string">'#b0bec5'</span><span class="token punctuation">,</span>        accent<span class="token punctuation">:</span> <span class="token string">'#8c9eff'</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span> <span class="token string">'#b71c1c'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Vuetidy预设"><a href="#Vuetidy预设" class="headerlink" title="Vuetidy预设"></a>Vuetidy预设</h2><ul><li>Vuetidy提供了预设的样式，需要通过下载依赖包来实现<br><img src="https://img-blog.csdnimg.cn/31475237815b4fa0910de6c122e0b1f9.png"></li></ul><blockquote><p>官方文档推荐使用<code>vue add vuetify-preset-&#123;Basil&#125;</code>来安装，但是我这里报错（），如果有小伙伴跟我遇到一样的问题，建议使用npm 或者yarn来安装依赖</p></blockquote><p>报错提示：<br><img src="https://img-blog.csdnimg.cn/7396c260f6194198b3d5bca21157416a.png"><br>推荐方法：</p><pre class=" language-javascript"><code class="language-javascript">npm install vue<span class="token operator">-</span>cli<span class="token operator">-</span>plugin<span class="token operator">-</span>vuetify<span class="token operator">-</span>preset<span class="token operator">-</span>basil<span class="token comment" spellcheck="true">// 或者</span>yarn add vue<span class="token operator">-</span>cli<span class="token operator">-</span>plugin<span class="token operator">-</span>vuetify<span class="token operator">-</span>preset<span class="token operator">-</span>basil</code></pre><p>安装成功之后，在<code>/plugins/vuetify</code>的js文件里配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuetify <span class="token keyword">from</span> <span class="token string">'vuetify/lib'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> preset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-cli-plugin-vuetify-preset-basil/preset'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuetify<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuetify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  preset<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// rtl 是文本方向设置，为true则代表文本从右向左展示</span>  rtl<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  theme<span class="token punctuation">:</span> <span class="token punctuation">{</span> dark<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vuetify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex数据持久化</title>
      <link href="/2022/09/27/vuex-persistance/"/>
      <url>/2022/09/27/vuex-persistance/</url>
      
        <content type="html"><![CDATA[<h2 id="持久化的目的"><a href="#持久化的目的" class="headerlink" title="持久化的目的"></a>持久化的目的</h2><blockquote><p>Vuex提供给我们更方便和安全的数据管理，但是一旦刷新页面，所存储的数据也会消失。但是大多数的项目背景要求我们对数据进行复用，比如：头像和用户信息需要存储，登录状态和token，购物车数据等等，所以我们需要对特定的Vuex版块进行持久化处理。</p></blockquote><h2 id="安装vuex-persistedstate插件实现持久化"><a href="#安装vuex-persistedstate插件实现持久化" class="headerlink" title="安装vuex-persistedstate插件实现持久化"></a>安装vuex-persistedstate插件实现持久化</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><pre class=" language-script"><code class="language-script">npm install --save vuex-persistedstate</code></pre><h3 id="2-引用插件"><a href="#2-引用插件" class="headerlink" title="2. 引用插件"></a>2. 引用插件</h3><ul><li><p>在store文件夹下的index文件里引入<br><img src="https://img-blog.csdnimg.cn/108d944e20584f848beee02b6177b9ba.png"></p></li><li><p>具体操作步骤</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// 第一步，引入持久化插件</span><span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">'vuex-persistedstate'</span><span class="token comment" spellcheck="true">// 以下引入的是状态模块，仅是示例，根据实际项目情况而定</span><span class="token keyword">import</span> shop <span class="token keyword">from</span> <span class="token string">'@/modules/shop'</span><span class="token keyword">import</span> payment <span class="token keyword">from</span> <span class="token string">'@/modules/payment'</span><span class="token keyword">import</span> news <span class="token keyword">from</span> <span class="token string">'@/modules/news '</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    shop<span class="token punctuation">,</span>    payment<span class="token punctuation">,</span>    news  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//第二步，进行持久化的配置</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里可以配置存储在localStorage还是sessionStorage, 默认是localStorage,例如</span>    storage<span class="token punctuation">:</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// paths是持久化存储state中的哪些数据，如果是模块下具体的数据需要加上模块名称，如payment.amount</span>    paths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'shop'</span><span class="token punctuation">,</span> <span class="token string">'payment'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><h3 id="3-实现部分数据持久化不同方法"><a href="#3-实现部分数据持久化不同方法" class="headerlink" title="3. 实现部分数据持久化不同方法"></a>3. 实现部分数据持久化不同方法</h3><ul><li>方法一，使用path指定持久化的模块</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">'vuex-persistedstate'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    shop<span class="token punctuation">,</span>    payment  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// shop和payment是模块名，会被持久化</span>    paths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'shop'</span><span class="token punctuation">,</span> <span class="token string">'payment'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><ul><li>方法二，使用<code>vuex-persistedstate</code>的reducer函数</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">'vuex-persistedstate'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    shop<span class="token punctuation">,</span>    payment  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   reducer <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 这里的val指代的是store里的所有state</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 只储存state中payment模块下的amount数据，前面的amount是keyname</span>       amount<span class="token punctuation">:</span> val<span class="token punctuation">.</span>payment<span class="token punctuation">.</span>amount     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><h3 id="4-存储数据到cookie的步骤"><a href="#4-存储数据到cookie的步骤" class="headerlink" title="4. 存储数据到cookie的步骤"></a>4. 存储数据到cookie的步骤</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">'vuex-persistedstate'</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Cookies <span class="token keyword">from</span> <span class="token string">'js-cookie'</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      storage<span class="token punctuation">:</span> <span class="token punctuation">{</span>        getItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>        setItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">{</span> expires<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> secure<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        removeItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="5-加密持久化的数据"><a href="#5-加密持久化的数据" class="headerlink" title="5. 加密持久化的数据"></a>5. 加密持久化的数据</h3><blockquote><p>因为持久化的数据是放在localStorage或者sessionStorage，所以为了数据安全，我们需要对持久化的版块进行加密。</p></blockquote><ul><li>安装加密的插件</li></ul><pre class=" language-javascript"><code class="language-javascript">npm install secure<span class="token operator">-</span>ls</code></pre><ul><li>在store/index.js引入</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">'vuex-persistedstate'</span><span class="token comment" spellcheck="true">// 引入插件</span><span class="token keyword">import</span> SecureLS <span class="token keyword">from</span> <span class="token string">'secure-ls'</span><span class="token comment" spellcheck="true">// encryptionSecret:自定义密钥，可选，这个操作能让数据更安全存储，密钥内容仅作参考，不要粘贴</span><span class="token keyword">const</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureLS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isCompression<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> encryptionSecret<span class="token punctuation">:</span> <span class="token string">'7352grt84-d90d-34dc-52e0-fad9efgwec675d1d'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    shop<span class="token punctuation">,</span>    payment  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    storage<span class="token punctuation">:</span> <span class="token punctuation">{</span>      getItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ls<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>      setItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ls<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>      removeItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 需要持久化的模块</span>    paths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>Vuex数据持久化的方法很多，<code>vuex-persistedstate</code>并不是唯一，可以自己书写JS实现，也可以用其他插件，例如vuex-persist。如果是公司项目进行数据持久化，最好对存储在localStorage的数据进行加密，防止数据泄露。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex study note</title>
      <link href="/2022/09/22/vuex-study-note/"/>
      <url>/2022/09/22/vuex-study-note/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Vuex应用场景"><a href="#一、Vuex应用场景" class="headerlink" title="一、Vuex应用场景"></a>一、Vuex应用场景</h2><blockquote><p>Vuex是基于Vue项目环境的状态管理。在Vue项目中，父子组件和兄弟组件传值给我们带来很多便捷，但是当多个组件嵌套，普通传值方法显得极为繁琐，并且很难维护。Vuex提供一个状态管理的平台和库，把全局需要共享的状态和数据放在VueX，任一组件都有权限调用并修改VueX的共享数据。</p></blockquote><h2 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h2><h3 id="01-安装VueX"><a href="#01-安装VueX" class="headerlink" title="01 安装VueX"></a>01 安装VueX</h3><pre class=" language-script"><code class="language-script">npm install vuex --save</code></pre><p>或者</p><pre class=" language-script"><code class="language-script">yarn add vuex --save</code></pre><h3 id="02-引用VueX"><a href="#02-引用VueX" class="headerlink" title="02 引用VueX"></a>02 引用VueX</h3><p>在项目目录下新建一个store文件夹，创建index.js并引入Vuex和相应模块。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// 以下引入的是状态模块，仅是示例，根据实际项目情况而定</span><span class="token keyword">import</span> shop <span class="token keyword">from</span> <span class="token string">'@/modules/shop'</span><span class="token keyword">import</span> payment <span class="token keyword">from</span> <span class="token string">'@/modules/payment'</span><span class="token keyword">import</span> news <span class="token keyword">from</span> <span class="token string">'@/modules/news '</span><span class="token keyword">import</span> workflow <span class="token keyword">from</span> <span class="token string">'@/modules/workflow'</span><span class="token keyword">import</span> notification <span class="token keyword">from</span> <span class="token string">'@/modules/notification'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p>具体项目结构如图所示，仅作与参考<br><img src="https://img-blog.csdnimg.cn/42fc524279124b969ff5e572bb641148.png" alt="VueX 项目文件结构"><br>在main.js中引入</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store/index'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  store<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="三、VueX五大核心概念"><a href="#三、VueX五大核心概念" class="headerlink" title="三、VueX五大核心概念"></a>三、VueX五大核心概念</h2><blockquote><p>State, Getter, Mutation, Action, Module</p></blockquote><h3 id="01-State"><a href="#01-State" class="headerlink" title="01 State"></a>01 State</h3><p>State是VueX中用于存放数据的板块，类似于Vue单文件里面的data，允许全局访问。</p><p>在对应的JS文件中注册state</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>Vue文件中访问State的数据<br>方法一：直接调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>方法二：借助计算属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>方法三：利用辅助函数<code>mapState</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="02-Getter"><a href="#02-Getter" class="headerlink" title="02 Getter"></a>02 Getter</h3><p>有时候我们调用state数据，需要用到state的派生数据（例如过滤表格中的数据）</p><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  doneTodosCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样操作显得复杂，Getter就是State的计算属性，可以对State进行操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  getDoubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><p>调用Getter写法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> $store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getDoubleCount <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>javascript中调用记得加<code>this</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    getDoubbleCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getDoubleCount    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>Getter的第一个参数为State，Getter 也可以接受其他 getter 作为第二个参数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  getCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  getDoubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> getters<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="03-Mutation"><a href="#03-Mutation" class="headerlink" title="03 Mutation"></a>03 Mutation</h3><p>VueX是集中管理数据的平台，Mutation是对应的修改数据的方法</p><blockquote><p>Mutation更像是一个事件，有事件类型(type)和回调函数(handler)</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  getCount<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  setCount <span class="token punctuation">(</span>state<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里setCount就是事件type，对应的回调函数如下</span>    state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span>n  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>调用Mutation</p><blockquote><p><code>store.commit</code>的第一个参数对应哪个Mutation，第二个参数作为值传入该Mutation</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    getDoubbleCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//这里的10会作为第二个参数传入setCount</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>注意，<code>mutation的回调函数(handler)不能为异步函数</code>。</p><h3 id="04-Action"><a href="#04-Action" class="headerlink" title="04 Action"></a>04 Action</h3><blockquote><p>Action 类似于 Mutation，不同在于：Action 提交的是 Mutation，而不是直接变更状态；并且Action可以包含任意异步操作</p></blockquote><ul><li>注册Action</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  getCount<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  setCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>  increment <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：这里的context是store实例对象，所以可以调用commit，也可以调用state和getters.</p></blockquote><ul><li>因为context是一个对象，也可以通过ES结构来书写<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>increment <span class="token punctuation">(</span><span class="token punctuation">{</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>调用Action，通过<code>store.dispatch</code>触发<pre class=" language-javascript"><code class="language-javascript">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span></code></pre></li><li>Action跟Mutation的最大区别就是Action可以定义异步函数，而Mutation不行<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>increment <span class="token punctuation">(</span><span class="token punctuation">{</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><code>store.dispatch</code>支持多个参数<br>先在JS文件中声明<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>setCount <span class="token punctuation">(</span>state<span class="token punctuation">,</span> playLoad<span class="token punctuation">)</span> <span class="token punctuation">{</span>  state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> playLoad<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>increment <span class="token punctuation">(</span>context， count<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">,</span> conut<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>调用<code>dispatch</code><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 以载荷形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 以对象形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">'setCount'</span><span class="token punctuation">,</span>count<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="05-Module"><a href="#05-Module" class="headerlink" title="05 Module"></a>05 Module</h3><blockquote><p>当项目足够大时，Vuex的数据会变得冗余，庞大，为了方便管理，Module把VueX的数据分为不同的模块，每个模块都有独立的state，getter，mutation，action。</p></blockquote><p>如图所示，modules文件夹下每一个JS文件都是单独的一个module模块<br><img src="https://img-blog.csdnimg.cn/42fc524279124b969ff5e572bb641148.png" alt="module模块"><br>在单独的shop module模块下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> shop <span class="token operator">=</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里的 `state` 对象是模块的局部状态</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    doubleCount <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>index文件夹声明store实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state：<span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token punctuation">}</span>，  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//上一段代码中的shop module文件</span>  shop  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果在Vue文件中用<code>store.state</code>访问count属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment" spellcheck="true">//这里返回的count 等于100，访问的是store实例中的state</span></code></pre><p>如果要访问shop module的count 属性，则需要增加module名：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>shop<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment" spellcheck="true">//这里返回的count 等于0，访问的是shop模块中的state</span></code></pre><blockquote><p>如果是访问module中的mutation方法，则会出现不同的情况。最好是不同的模块之间不要用相同的命名</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    getDoubbleCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setCount'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//如果其他模块中都有setCount方法，则所有的都会被调用</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>当然，遇到这种情况也可以添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> shop <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//调用时需要模块名为路径</span>  namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//正确的调用方式：$store.commit('shop/increment')</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里的 `state` 对象是模块的局部状态</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//正确的调用方式：$store.getters['shop/doubleCount ']</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    doubleCount <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上是关于Vuex的讲解，列举module的分类方法并不是唯一，也可以单独的把state, getter, action, mutation放入独立的js文件。Vuex帮助我们高效的解决了全局的数据传递，但是需要更加规范的分类，才能应对越来越冗余的数据。下一篇博客将会讲解如何进行Vuex数据持久化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sass study note</title>
      <link href="/2022/09/20/sass-study-note/"/>
      <url>/2022/09/20/sass-study-note/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Sass和Scss区别"><a href="#一、Sass和Scss区别" class="headerlink" title="一、Sass和Scss区别"></a>一、Sass和Scss区别</h2><ol><li><strong>Sass</strong>是CSS3扩展，增加了规则嵌套、变量、混合、选择器继承等等语法，而<strong>Scss</strong>是<strong>Sass</strong>的升级版本，具备Sass特性的同时，更能兼具CSS3的语法特点；</li><li><strong>Sass</strong>使用的是缩进语法，去掉括号的同时，对空格要求更为严格，<strong>Scss</strong>跟CSS3用法相似；</li><li>使用时要注意，同项目可以同时使用<strong>Sass</strong>和<strong>Scss</strong>,单文件开发不能同时引用，引用时只需要标签内加<code>lang=&quot;sass&quot;</code><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"sass"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li></ol><h2 id="二、Sass语法"><a href="#二、Sass语法" class="headerlink" title="二、Sass语法"></a>二、Sass语法</h2><ol><li>去掉{}，使用换行来区分选择器名称和属性, 换行替换<code>;</code>来作为属性之间的间隔。<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>main<span class="token operator">-</span>contentheight<span class="token punctuation">:</span> 100px</code></pre></li><li>缩进必须为两个空格或2的倍数，空格不规范会导致样式不生效。</li><li><strong>Sass</strong>的嵌套语法</li></ol><ul><li>CSS3语法：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>main <span class="token punctuation">.</span>top <span class="token punctuation">{</span>margin<span class="token operator">-</span>top<span class="token punctuation">:</span>10px<span class="token punctuation">;</span>height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>Sass语法可改为：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>main<span class="token punctuation">.</span>top  margin<span class="token operator">-</span>top<span class="token punctuation">:</span>10px  height<span class="token punctuation">:</span> 100px</code></pre></li></ul><ol start="4"><li>父子class的class名称拼接</li></ol><ul><li>父选择器名称<code>main-content</code>，子选择器的名称<code>main-content-top</code>，<strong>Sass</strong>写法：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>mian<span class="token operator">-</span>contentheight<span class="token punctuation">:</span> 500px<span class="token operator">&amp;</span><span class="token operator">-</span>top height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span></code></pre></li></ul><ol start="5"><li><strong>Sass</strong>的变量使用</li></ol><ul><li>变量声明一律用<code>$</code><pre class=" language-css"><code class="language-css">$width = <span class="token number">20</span>px<span class="token number">.</span>main-content<span class="token property">width</span><span class="token punctuation">:</span>$width</code></pre></li><li>默认变量只须<code>!default</code><pre class=" language-css"><code class="language-css">$width = <span class="token number">20</span>px !default<span class="token number">.</span>main-content <span class="token property">width</span><span class="token punctuation">:</span>$width</code></pre></li><li><strong>Sass</strong>中的变量也存在块级作用域<pre class=" language-css"><code class="language-css">//当前的变量只能在main-content中生效<span class="token number">.</span>main-content$<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token property">width</span><span class="token punctuation">:</span> $width// 通过!global可在其他选择器中使用变量<span class="token number">.</span>main-content$<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px!global<span class="token property">width</span><span class="token punctuation">:</span> $width<span class="token number">.</span>bottom-content<span class="token property">width</span><span class="token punctuation">:</span> $width</code></pre></li></ul><ol start="6"><li>当你的样式变得越来越复杂，你需要大段的重用样式的代码，独立的变量就没办法应付这种情况了。你可以通过<strong>Sass</strong>的混合器实现大段样式的重用。</li></ol><ul><li>混合器使用<code>@mixin</code>标识符定义：<pre class=" language-css"><code class="language-css">@mixin field-label<span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#020202</span>\</code></pre></li><li>使用<code>@include</code>来引用混合器<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content-title@include field-label</code></pre></li></ul><ol start="7"><li><strong>Sass</strong>中的数字运算</li></ol><ul><li><strong>Sass</strong>支持<code>(+, -, *,  / ,%)</code>运算，如果必要会在不同单位间转换值。<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>px + <span class="token number">4</span>pt</code></pre></li><li>在 CSS 中通常起到分隔数字的用途，<strong>Sass</strong>同时也赋予了<code>/</code>除法运算的功能。<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content<span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>px / <span class="token number">5</span>px</code></pre></li><li>如果需要使用变量，同时又要确保<code>/</code>不做除法运算而是完整地编译到 CSS 文件中，只需要用 <code>#&#123;&#125;</code>插值语句将变量包裹。<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.main-content</span>$font-size: 12px;$line-height: 30px;font: #</span><span class="token punctuation">{</span>$font-size<span class="token punctuation">}</span><span class="token selector">/#</span><span class="token punctuation">{</span>$line-height<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><ol start="8"><li><strong>Sass</strong>的颜色运算<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.75</span><span class="token punctuation">)</span> + <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">0.75</span><span class="token punctuation">)</span></code></pre></li></ol><ul><li>编译为<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">0.75</span><span class="token punctuation">)</span></code></pre></li></ul><ol start="9"><li>圆括号<code>()</code>用于运算<pre class=" language-css"><code class="language-css"><span class="token number">.</span>main-content<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>em + <span class="token punctuation">(</span><span class="token number">2</span>em * <span class="token number">3</span><span class="token punctuation">)</span></code></pre></li><li><strong>Sass</strong>的函数运用</li></ol><ul><li>Css语句调用函数<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">100%</span>, <span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>编译为<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0000</span></code></pre></li><li><strong>Sass</strong> 函数允许使用关键词参数 (keyword arguments)，上面的例子也可以写成：<pre class=" language-css"><code class="language-css"><span class="token number">.</span>field-label<span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>$<span class="token property">hue</span><span class="token punctuation">:</span> <span class="token number">0</span>, $<span class="token property">saturation</span><span class="token punctuation">:</span> <span class="token number">100%</span>, $<span class="token property">lightness</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">)</span></code></pre>关键词参数给函数提供了更灵活的接口（通过外部传参来控制函数执行效果）。关键词参数可以打乱顺序使用，如果使用默认值也可以省缺，另外，参数名被视为变量名，下划线、短横线可以互换使用。</li></ul><ol start="11"><li><strong>Sass</strong>导入样式</li></ol><ul><li>传统的CSS具有<code>@import</code>导入功能，但是在项目加载时，<code>@import</code>不会最先加载，导致页面显示的样式会存在j加载顺序的问题导致卡顿，但是<strong>Sass</strong>完美解决了问题，在项目加载时就会运行<code>@import</code>。被导入的<strong>Sass</strong>和<strong>Scss</strong>会编译为一个<strong>CSS</strong>文件，被导入的文件中所包含的变量或者混合指令<code>@mixin</code> 都可以在导入的文件中使用。</li><li>被导入的文件最好附带拓展名，例如·<code>.scss </code>或<code> .sass</code>。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为<code> .scss</code>或 <code>.sass</code>的文件并将其导入。<pre class=" language-css"><code class="language-css">// 推荐写法<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"global.scss"</span><span class="token punctuation">;</span></span>// 或者<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"global"</span><span class="token punctuation">;</span></span></code></pre></li><li><strong>Sass</strong> 允许同时导入多个文件<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"global.scss"</span>, <span class="token string">"vuetify.sass"</span><span class="token punctuation">;</span></span></code></pre></li></ul><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><strong>Sass</strong>的缩进语法在实际开发过程中会更高效，但是一定要格外注意缩进的使用，尤其是在父选择器和子选择器的情景下。<strong>Sass</strong>自带的缩写语法很方便，但是要求使用者有规范的命名习惯，不然sass代码增加过后会很难定位，好的解决办法是加注释，这样对后来者更user friendly。<br><strong>Scss</strong>在功能上和<strong>Sass</strong>并无区别，但是<strong>Scss</strong>更加贴近CSS，对大多数开发者而言也更熟悉。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
